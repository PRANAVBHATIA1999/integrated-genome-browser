package com.affymetrix.igb.prefs;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;

import com.affymetrix.common.CommonUtils;
import com.affymetrix.genometryImpl.util.GeneralUtils;
import com.affymetrix.genometryImpl.util.PreferenceUtils;
import com.affymetrix.igb.parsers.XmlPrefsParser;

/**
 *
 * @author hiralv
 */
public class WebLinkUtils {
	private static final String separator = System.getProperty("line.separator");
	private static final String FILE_NAME = "weblinks.xml";	// Name of the xml file used to store the web links data.
	
	/**
	 *  Returns the file that is used to store the user-edited web links.
	 */
	private static File getLinksFile() {
		return new File(PreferenceUtils.getAppDataDirectory(), FILE_NAME);
	}
	
	/**
	 *  Loads links from the file specified by {@link #getLinksFile()}.
	 */
	public static void autoLoad() {
		File f = getLinksFile();
		if (f == null || !f.exists()) {
			return;
		}
		String filename = f.getAbsolutePath();
		try {
			Logger.getLogger(WebLinkUtils.class.getName()).log(Level.INFO,
					"Loading web links from file \"{0}\"", filename);

			importWebLinks(f);
		} catch (Exception ioe) {
			Logger.getLogger(WebLinkUtils.class.getName()).log(Level.SEVERE,
					"Could not load web links from file \"{0}\"", filename);
		}
	}

	/** Save the current web links into the file that was specified
	 *  by {@link #getLinksFile()}.
	 *  @return true for sucessfully saving the file
	 */
	public static boolean autoSave() {
		File f = getLinksFile();
		String filename = f.getAbsolutePath();
		try {
			Logger.getLogger(WebLinkUtils.class.getName()).log(Level.INFO,
					"Saving web links to file \"{0}\"", filename);
			File parent_dir = f.getParentFile();
			if (parent_dir != null) {
				parent_dir.mkdirs();
			}
			exportWebLinks(f, true);
			return true;
		} catch (IOException ioe) {
			Logger.getLogger(WebLinkUtils.class.getName()).log(Level.SEVERE,
					"Error while saving web links to \"{0}\"", filename);
		}
		return false;
	}
	
	public static void importWebLinks(File f) throws FileNotFoundException, IOException {
		XmlPrefsParser.parse(new FileInputStream(f));
	}

	public static void exportWebLinks(File f, boolean include_warning) throws IOException {
		FileWriter fw = null;
		BufferedWriter bw = null;
		try {

			fw = new FileWriter(f);
			bw = new BufferedWriter(fw);
			bw.write("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
			bw.write(separator);
			bw.write("");
			bw.write(separator);
			bw.write("<!--");
			bw.write(separator);
			bw.write("  This file was generated by " + CommonUtils.getInstance().getAppName() + " " + CommonUtils.getInstance().getAppVersionFull() + "\n");
			bw.write(separator);
			if (include_warning) {
				bw.write("  WARNING: This file is automatically created by the application.");
				bw.write(separator);
				bw.write("  Edit the Web-Links from inside the application.");
				bw.write(separator);
			}
			bw.write("-->");
			bw.write(separator);
			bw.write("");
			bw.write(separator);
			bw.write("<prefs>");
			bw.write(separator);

			for (WebLink link : WebLinkList.getLocalList().getWebLinkList()) {
				String xml = link.toXML();
				bw.write(xml);
				bw.write(separator);
			}

			bw.write("</prefs>");
			bw.write(separator);
			bw.write(separator);
		} finally {
			GeneralUtils.safeClose(bw);
			GeneralUtils.safeClose(fw);
		}
	}

}
