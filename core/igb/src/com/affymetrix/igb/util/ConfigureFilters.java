package com.affymetrix.igb.util;

import com.affymetrix.genometryImpl.filter.ChainFilter;
import com.affymetrix.genometryImpl.filter.SymmetryFilterI;
import com.affymetrix.genometryImpl.general.IParameters;
import com.affymetrix.igb.util.ConfigureOptionsDialog.Filter;
import javax.swing.DefaultListModel;

/**
 *
 * @author hiralv
 */
public class ConfigureFilters extends javax.swing.JPanel {
	private Filter<SymmetryFilterI> optionFilter;
			
	/**
	 * Creates new form Filter
	 */
	public ConfigureFilters() {
		initComponents();
	}

	public void setFilter(SymmetryFilterI filter){
		if(filter instanceof ChainFilter){
			ChainFilter chainFilter = (ChainFilter)filter;
			for(SymmetryFilterI f : chainFilter.getFilters()){
				((DefaultListModel)filterList.getModel()).addElement(new FilterWrapper(f));
			}
		} else if (filter != null){
			((DefaultListModel)filterList.getModel()).addElement(new FilterWrapper(filter));
		}
	}
	
	public SymmetryFilterI getFilter() {
		int size = filterList.getModel().getSize();
		if (size == 0) {
			return null;
		} else if (size == 1) {
			FilterWrapper filterWrapper = (FilterWrapper)filterList.getModel().getElementAt(0);
			return filterWrapper.filter;
		} else {
			ChainFilter filter = new ChainFilter();
			java.util.List<SymmetryFilterI> filters = new java.util.ArrayList<SymmetryFilterI>(size);
			for (int i = 0; i < filterList.getModel().getSize(); i++) {
				FilterWrapper filterWrapper = (FilterWrapper)filterList.getModel().getElementAt(i);
				filters.add(filterWrapper.filter);
			}
			filter.setFilter(filters);
			return filter;
		}
	}
	
	public void setOptionsFilter(ConfigureOptionsDialog.Filter<SymmetryFilterI> optionFilter){
		this.optionFilter = optionFilter;
	}
	
	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        filterListScrollPane = new javax.swing.JScrollPane();
        filterList = new javax.swing.JList();
        addButton = new javax.swing.JButton();
        removeButton = new javax.swing.JButton();
        editButton = new javax.swing.JButton();

        filterList.setModel(new DefaultListModel());
        filterList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        filterList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                filterListValueChanged(evt);
            }
        });
        filterListScrollPane.setViewportView(filterList);

        addButton.setText("Add");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        removeButton.setText("Remove");
        removeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeButtonActionPerformed(evt);
            }
        });

        editButton.setText("Edit");
        editButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editButtonActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(filterListScrollPane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 207, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(removeButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(editButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(addButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(addButton)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(removeButton)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(editButton)
                        .add(0, 0, Short.MAX_VALUE))
                    .add(filterListScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 278, Short.MAX_VALUE))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        ConfigureOptionsDialog<SymmetryFilterI> optionDialog = new ConfigureOptionsDialog<SymmetryFilterI>(SymmetryFilterI.class, "Filter", optionFilter, false);
		optionDialog.setTitle("Add filter");
		optionDialog.setLocationRelativeTo(this);
		SymmetryFilterI selectedFilter = optionDialog.showDialog();
		if(selectedFilter != null){
			((DefaultListModel)filterList.getModel()).addElement(new FilterWrapper(selectedFilter));
		}
    }//GEN-LAST:event_addButtonActionPerformed

    private void removeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeButtonActionPerformed
		int selected = filterList.getSelectedIndex();
		((DefaultListModel)filterList.getModel()).removeElementAt(selected);
    }//GEN-LAST:event_removeButtonActionPerformed

    private void editButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editButtonActionPerformed
		FilterWrapper selectedFilterWrapper = (FilterWrapper)filterList.getSelectedValue();
		SymmetryFilterI selectedFilter = selectedFilterWrapper.filter;
		SymmetryFilterI selectedClone = selectedFilter.newInstance();
	
		ConfigureOptionsDialog<SymmetryFilterI> optionDialog = new ConfigureOptionsDialog<SymmetryFilterI>(SymmetryFilterI.class, "Filter");
		optionDialog.setTitle("Edit filter");
		optionDialog.setLocationRelativeTo(this);
		optionDialog.setInitialValue(selectedClone);
		optionDialog.setEnabled(false);
		optionDialog.setVisible(true);
		Object value = optionDialog.getValue();

		if (value != null && (Integer) value == javax.swing.JOptionPane.OK_OPTION) {
			for (String key : ((IParameters) selectedClone).getParametersType().keySet()) {
				((IParameters) selectedFilter).setParameterValue(key, ((IParameters) selectedClone).getParameterValue(key));
			}
		}
    }//GEN-LAST:event_editButtonActionPerformed

    private void filterListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_filterListValueChanged
        FilterWrapper selectedFilterWrapper = (FilterWrapper)filterList.getSelectedValue();
		SymmetryFilterI selectedFilter = selectedFilterWrapper.filter;
		if(selectedFilter instanceof IParameters 
				&& ((IParameters)selectedFilter).getParametersType() != null 
				&& !((IParameters)selectedFilter).getParametersType().isEmpty()){
			editButton.setEnabled(true);
		} else {
			editButton.setEnabled(false);
		}
    }//GEN-LAST:event_filterListValueChanged

	private static class FilterWrapper {
	
		private SymmetryFilterI filter;
		FilterWrapper(SymmetryFilterI filter){
			this.filter = filter;
		}
		
		@Override
		public String toString(){
			return filter.getDisplay();
		}
	}
	
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JButton editButton;
    private javax.swing.JList filterList;
    private javax.swing.JScrollPane filterListScrollPane;
    private javax.swing.JButton removeButton;
    // End of variables declaration//GEN-END:variables
}
