/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * SelectSequenceFiles.java
 *
 * Created on Sep 27, 2011, 11:16:31 AM
 */
package edu.uncc.bioinformatics.quickloadbuilder;


import java.awt.CardLayout;
import java.io.File;
import javax.swing.BoxLayout;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

/**
 *
 * @author jfvillal
 */
public class SelectSequenceFiles extends javax.swing.JPanel {
    public static final String MODCHROME_ON_COMPUTER = "ModChromeOnComputer";
    public static final String MODCHROME_ON_WEB_ARCHIVE = "ModChromeOnWebArchiveM";
    public static final String MODCHROME_ON_URL = "ModChromeOnURL";
    public static final String MODCHROME_GENERATE = "ModchromeGenerate";
    
    
    boolean ModchromeOnComputerValid;
    boolean ModchromeOnExistingArchiveValid;
    boolean ModchromeOnURLValid;
    
    
    QuickLoadArchiveBuilderView Parent;
    
    public QuickLoadArchiveBuilderView getFaceParent(){
        return Parent;
    }
    
    ModChromeInfoBrowse OnComputer = new ModChromeInfoBrowse(this);
    ModChromeInfoURL Url = new ModChromeInfoURL(this);
    ModChromeInfoWebArchive WebArchive = new ModChromeInfoWebArchive();
    ModChromeInfoGenerate Generate = new ModChromeInfoGenerate( );
    
    /** Creates new form SelectSequenceFiles */
    public SelectSequenceFiles( QuickLoadArchiveBuilderView parent ) {
        Parent = parent;
        initComponents();
        
        ModchromeCreateOptionPanel.setLayout( new CardLayout() );
        /**
         * The modchrome file is provided by the user.  and the file is in the computer
         * presents the user with a text field and a browse button to find the file
         */
        ModchromeCreateOptionPanel.add(OnComputer, MODCHROME_ON_COMPUTER);
        /**
         * Expects the user to paste a URL that points to a modchrome file on the Internet
         */
        ModchromeCreateOptionPanel.add( Url, MODCHROME_ON_URL);
        /**
         * Shows a list of modchrome files that could be used for the genus/species/subspiecies
         * type imputted by the user on the first pages.
         */
        ModchromeCreateOptionPanel.add(WebArchive, MODCHROME_ON_WEB_ARCHIVE);
        /**
         * Generate the modchrome file using the sequence files provided in this page.
         */
        ModchromeCreateOptionPanel.add( Generate , MODCHROME_GENERATE);
        
        SequenceFileTable.setModel(Parent.SequencesTableModel);
        
        
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ChromeCreationOption = new javax.swing.ButtonGroup();
        Browse = new javax.swing.JButton();
        Remove = new javax.swing.JButton();
        RemoveAll = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        Fato2bitCheckBox = new javax.swing.JCheckBox();
        ROnComputer = new javax.swing.JRadioButton();
        Archive = new javax.swing.JRadioButton();
        URL = new javax.swing.JRadioButton();
        RGenerate = new javax.swing.JRadioButton();
        ModchromeCreateOptionPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        SequenceFileTable = new javax.swing.JTable();

        setName("Form"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(edu.uncc.bioinformatics.quickloadbuilder.QuickLoadArchiveBuilderApp.class).getContext().getResourceMap(SelectSequenceFiles.class);
        Browse.setText(resourceMap.getString("Browse.text")); // NOI18N
        Browse.setName("Browse"); // NOI18N
        Browse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BrowseActionPerformed(evt);
            }
        });

        Remove.setText(resourceMap.getString("Remove.text")); // NOI18N
        Remove.setName("Remove"); // NOI18N
        Remove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RemoveActionPerformed(evt);
            }
        });

        RemoveAll.setText(resourceMap.getString("RemoveAll.text")); // NOI18N
        RemoveAll.setName("RemoveAll"); // NOI18N
        RemoveAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RemoveAllActionPerformed(evt);
            }
        });

        jLabel8.setText(resourceMap.getString("jLabel8.text")); // NOI18N
        jLabel8.setName("jLabel8"); // NOI18N

        Fato2bitCheckBox.setText(resourceMap.getString("Fato2bitCheckBox.text")); // NOI18N
        Fato2bitCheckBox.setToolTipText(resourceMap.getString("Fato2bitCheckBox.toolTipText")); // NOI18N
        Fato2bitCheckBox.setName("Fato2bitCheckBox"); // NOI18N
        Fato2bitCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Fato2bitCheckBoxActionPerformed(evt);
            }
        });

        ChromeCreationOption.add(ROnComputer);
        ROnComputer.setSelected(true);
        ROnComputer.setText(resourceMap.getString("ROnComputer.text")); // NOI18N
        ROnComputer.setName("ROnComputer"); // NOI18N
        ROnComputer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ROnComputerActionPerformed(evt);
            }
        });

        ChromeCreationOption.add(Archive);
        Archive.setText(resourceMap.getString("Archive.text")); // NOI18N
        Archive.setName("Archive"); // NOI18N
        Archive.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ArchiveActionPerformed(evt);
            }
        });

        ChromeCreationOption.add(URL);
        URL.setText(resourceMap.getString("URL.text")); // NOI18N
        URL.setName("URL"); // NOI18N
        URL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                URLActionPerformed(evt);
            }
        });

        ChromeCreationOption.add(RGenerate);
        RGenerate.setText(resourceMap.getString("RGenerate.text")); // NOI18N
        RGenerate.setName("RGenerate"); // NOI18N
        RGenerate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RGenerateActionPerformed(evt);
            }
        });

        ModchromeCreateOptionPanel.setName("ModchromeCreateOptionPanel"); // NOI18N

        javax.swing.GroupLayout ModchromeCreateOptionPanelLayout = new javax.swing.GroupLayout(ModchromeCreateOptionPanel);
        ModchromeCreateOptionPanel.setLayout(ModchromeCreateOptionPanelLayout);
        ModchromeCreateOptionPanelLayout.setHorizontalGroup(
            ModchromeCreateOptionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 629, Short.MAX_VALUE)
        );
        ModchromeCreateOptionPanelLayout.setVerticalGroup(
            ModchromeCreateOptionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 245, Short.MAX_VALUE)
        );

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        SequenceFileTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "Sequence Files"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        SequenceFileTable.setName("SequenceFileTable"); // NOI18N
        jScrollPane1.setViewportView(SequenceFileTable);
        SequenceFileTable.getColumnModel().getColumn(0).setHeaderValue(resourceMap.getString("SequenceFileTable.columnModel.title0")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(Remove)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(RemoveAll))
                    .addComponent(jScrollPane1, 0, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 368, Short.MAX_VALUE)
                        .addComponent(Browse))
                    .addComponent(ROnComputer)
                    .addComponent(Archive, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 629, Short.MAX_VALUE)
                    .addComponent(URL)
                    .addComponent(RGenerate)
                    .addComponent(Fato2bitCheckBox)
                    .addComponent(ModchromeCreateOptionPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(Browse))
                        .addGap(95, 95, 95)
                        .addComponent(ROnComputer)
                        .addGap(18, 18, 18)
                        .addComponent(Archive)
                        .addGap(18, 18, 18)
                        .addComponent(URL)
                        .addGap(18, 18, 18)
                        .addComponent(RGenerate)
                        .addGap(18, 18, 18)
                        .addComponent(ModchromeCreateOptionPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 529, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Remove)
                    .addComponent(RemoveAll)
                    .addComponent(Fato2bitCheckBox))
                .addContainerGap(12, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void Fato2bitCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Fato2bitCheckBoxActionPerformed
    }
        // TODO add your handling code here:}//GEN-LAST:event_Fato2bitCheckBoxActionPerformed
    String State;
    private void ROnComputerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ROnComputerActionPerformed
        CardLayout layout = (CardLayout) ModchromeCreateOptionPanel.getLayout();
        State = MODCHROME_ON_COMPUTER;
        layout.show( ModchromeCreateOptionPanel, State );
        updateNextButton( OnComputer.validateEntries() );
        OnComputer.updateGUI();
    }//GEN-LAST:event_ROnComputerActionPerformed

    public void updateNextButton( boolean valid ){
        if( valid  ){
            Parent.enableNext();
        }else{
            Parent.disableNext();
        }
    }
    
    private void ArchiveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ArchiveActionPerformed
        CardLayout layout = (CardLayout) ModchromeCreateOptionPanel.getLayout();
        State = MODCHROME_ON_WEB_ARCHIVE;
        layout.show( ModchromeCreateOptionPanel, State );
        updateNextButton( WebArchive.isValid() );
    }//GEN-LAST:event_ArchiveActionPerformed

    private void URLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_URLActionPerformed
        CardLayout layout = (CardLayout) ModchromeCreateOptionPanel.getLayout();
         State =  MODCHROME_ON_URL;
        layout.show( ModchromeCreateOptionPanel, State );
        
        updateNextButton( Url.validateEntries() );
        Url.updateGUI();
    }//GEN-LAST:event_URLActionPerformed

    private void RGenerateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RGenerateActionPerformed
        CardLayout layout = (CardLayout) ModchromeCreateOptionPanel.getLayout();
         State = MODCHROME_GENERATE;
        layout.show( ModchromeCreateOptionPanel, State );
        updateNextButton( Generate.isValid() );
    }//GEN-LAST:event_RGenerateActionPerformed
    final JFileChooser fc = new JFileChooser();
    private void BrowseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BrowseActionPerformed
        fc.setMultiSelectionEnabled(true );
        int returnVal = fc.showOpenDialog( this );
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File[] files = fc.getSelectedFiles();
            for( File f: files){
                Parent.MSequences.put( f.getPath() , f );
            }
            if( files.length > 0){
                updateRemoveButtons();
            }
        } else {
            //do nothing
        }
        SequenceFileTable.updateUI();
    }//GEN-LAST:event_BrowseActionPerformed

    private void RemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RemoveActionPerformed
        int[] vals = SequenceFileTable.getSelectedRows();
        Object[] f =  Parent.MSequences.values().toArray();
        if( vals.length > 0 ){
            for( int i : vals  ){
                Parent.MSequences.remove( ((File)f[i]).getPath());
            }
            SequenceFileTable.updateUI();
            updateRemoveButtons();
        }else{
            JOptionPane.showMessageDialog(this, "No files selected!  Select some file from the table, then click remove to remove files from the list.");
        }
    }//GEN-LAST:event_RemoveActionPerformed

    private void RemoveAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RemoveAllActionPerformed
        Parent.MSequences.clear();        
        SequenceFileTable.updateUI();
        updateRemoveButtons();
    }//GEN-LAST:event_RemoveAllActionPerformed

    public void updateRemoveButtons(){
        if( Parent.MSequences.isEmpty() ){
            RemoveAll.setEnabled(false);
            Remove.setEnabled(false);
        }else{
            RemoveAll.setEnabled(true);
            Remove.setEnabled(true);
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton Archive;
    private javax.swing.JButton Browse;
    private javax.swing.ButtonGroup ChromeCreationOption;
    private javax.swing.JCheckBox Fato2bitCheckBox;
    private javax.swing.JPanel ModchromeCreateOptionPanel;
    private javax.swing.JRadioButton RGenerate;
    private javax.swing.JRadioButton ROnComputer;
    private javax.swing.JButton Remove;
    private javax.swing.JButton RemoveAll;
    private javax.swing.JTable SequenceFileTable;
    private javax.swing.JRadioButton URL;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

    void updateGUI() {
        SequenceFileTable.updateUI();
    }

    public int getMochromeCreationOption() {
        if( ROnComputer.isSelected() ){
            return LOCAL;
        }else if( URL.isSelected() ){
            return FROM_URL;
        }else if( Archive.isSelected() ){
            return FROM_URL;
        }else if( RGenerate.isSelected()){
            return GENERATE;
        }
        return GENERATE;
    }
    public static final int GENERATE = 0;
    public static final int FROM_URL = 1;
    public static final int LOCAL = 2;
}
