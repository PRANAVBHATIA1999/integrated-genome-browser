/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ModChromeInfoBrowse.java
 *
 * Created on Sep 27, 2011, 10:55:33 AM
 */
package edu.uncc.bioinformatics.quickloadbuilder;

import edu.uncc.bioinformatics.quickloadbuilder.QuickloadSourceValidator.ErrorListener;
import java.awt.Color;
import java.io.File;
import javax.swing.BorderFactory;
import javax.swing.JFileChooser;

/**
 *
 * @author jfvillal
 */
public class ModChromeInfoBrowse extends javax.swing.JPanel {

    /** Creates new form ModChromeInfoBrowse */
    SelectSequenceFiles Parent;
    public ModChromeInfoBrowse( SelectSequenceFiles parent ) {
        initComponents();
        Parent = parent;
    }
    
    

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        FilePath = new javax.swing.JTextField();
        Browse = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        PathError = new javax.swing.JLabel();

        setName("Form"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(edu.uncc.bioinformatics.quickloadbuilder.QuickLoadArchiveBuilderApp.class).getContext().getResourceMap(ModChromeInfoBrowse.class);
        FilePath.setText(resourceMap.getString("FilePath.text")); // NOI18N
        FilePath.setName("FilePath"); // NOI18N
        FilePath.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                FilePathCaretUpdate(evt);
            }
        });

        Browse.setText(resourceMap.getString("Browse.text")); // NOI18N
        Browse.setName("Browse"); // NOI18N
        Browse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BrowseActionPerformed(evt);
            }
        });

        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N

        PathError.setText(resourceMap.getString("PathError.text")); // NOI18N
        PathError.setName("PathError"); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(PathError, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 321, Short.MAX_VALUE)
                    .addComponent(FilePath, javax.swing.GroupLayout.PREFERRED_SIZE, 321, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(Browse)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(FilePath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Browse)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(PathError, javax.swing.GroupLayout.DEFAULT_SIZE, 16, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    
    final JFileChooser fc = new JFileChooser();
    private void BrowseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BrowseActionPerformed
        fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
        fc.setMultiSelectionEnabled(false);
        int returnVal = fc.showOpenDialog( this );
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
            FilePath.setText( file.getPath() );
            validateEntries();
        } else {
            //do nothing
        }
        
    }//GEN-LAST:event_BrowseActionPerformed
    boolean Valid;
    
    public boolean getVaild(){
        return Valid;
    }
    public File getModChromeFile(){
        if( Valid){
            return new File( FilePath.getText() );
        }else{
            return null;
        }
    }
    String PathErrorStr;
    public boolean validateEntries(){
        Valid = ( new File( FilePath.getText() ).exists() &&  !new File( FilePath.getText() ).isDirectory() );
        
        Valid = Valid && QuickloadSourceValidator.validateModchromeURI("file://" + FilePath.getText()
                , new ErrorListener(){

                    public void setError(String error) {
                        PathErrorStr = error;
                    }
                });
        
        return Valid;
    }
    File ModChromeFilel;
    private void FilePathCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_FilePathCaretUpdate
        validateEntries();
        updateGUI();
    }//GEN-LAST:event_FilePathCaretUpdate
    public void  updateGUI(){
        if( validateEntries() ){   
            FilePath.setBorder(BorderFactory.createMatteBorder(1, 1, 1, 1, Color.green) );
            Valid = true;
            Parent.getFaceParent().enableNext();
            PathError.setText("");
        }else{
            FilePath.setBorder( BorderFactory.createMatteBorder( 1, 1, 1, 1, Color.red));
            Valid = false;
            Parent.getFaceParent().disableNext();
            PathError.setText(C.getRed(PathErrorStr));
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Browse;
    private javax.swing.JTextField FilePath;
    private javax.swing.JLabel PathError;
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables
}
