/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * AnnotationFiles.java
 *
 * Created on Sep 23, 2011, 1:50:54 PM
 */
package edu.uncc.bioinformatics.quickloadbuilder;

import java.awt.Color;
import java.net.URI;
import javax.swing.BorderFactory;
import javax.swing.JColorChooser;
import javax.swing.JLabel;
import javax.swing.JTextField;
import javax.swing.ListSelectionModel;

/**
 *
 * @author jfvillal
 */
public class AnnotationFiles extends javax.swing.JPanel {
    QuickLoadArchiveBuilderView Parent;
    int LastIndex;
    Color DefaultColor;
    /** Creates new form AnnotationFiles */
    public AnnotationFiles( QuickLoadArchiveBuilderView parent ) {
        initComponents();
        DefaultColor = BackgroundColor.getBackground();
        Parent = parent;
        TAnnotations.setModel( Parent.AnnotationsTableModel );
        TAnnotations.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        
        for( int i = 0; i < Annotation.DirectionTypeValues.length; i++){
            DirectionType.addItem( Annotation.DirectionTypeValues[i] );
        }
        
        for( int i = 0; i < Annotation.ViewModeValues.length; i++){
            ViewMode.addItem( Annotation.ViewModeValues[i] );
        }
        
        Float[] item = {8.0f, 10.0f, 12.0f, 14.0f, 16.0f, 18.0f, 20.0f};
        for( Float i : item ){
            NameSize.addItem( i );
        }
        
    }
    
    
    public void updateTable(){
        TAnnotations.updateUI();
        if( !Parent.MAnnotations.isEmpty()){
            TAnnotations.setRowSelectionInterval(0, 0);
            LastIndex = 0;
        }
    }
    
    
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        TAnnotations = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        Label = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        LoadHint = new javax.swing.JCheckBox();
        jLabel4 = new javax.swing.JLabel();
        Url = new javax.swing.JTextField();
        Title = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        NameLabel = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        Description = new javax.swing.JTextField();
        Name = new javax.swing.JLabel();
        Connected = new javax.swing.JCheckBox();
        jLabel8 = new javax.swing.JLabel();
        Collapsed = new javax.swing.JCheckBox();
        ShowTracks = new javax.swing.JCheckBox();
        DirectionType = new javax.swing.JComboBox();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        BackgroundColorButton = new javax.swing.JButton();
        PositiveStrandColorButton = new javax.swing.JButton();
        NegativeStrandColorButton = new javax.swing.JButton();
        ViewMode = new javax.swing.JComboBox();
        BackgroundColor = new javax.swing.JTextField();
        PositiveStrandColor = new javax.swing.JTextField();
        NegativeStrandColor = new javax.swing.JTextField();
        BackgroundColorLabel = new javax.swing.JLabel();
        PositiveStrandColorLabel = new javax.swing.JLabel();
        NegativeStrandColorLabel = new javax.swing.JLabel();
        BackgroundError = new javax.swing.JLabel();
        PositiveStrandError = new javax.swing.JLabel();
        NegativeStrandError = new javax.swing.JLabel();
        UrlError = new javax.swing.JLabel();
        MaxDepthLabel = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        NameSize = new javax.swing.JComboBox();
        MaxDepth = new javax.swing.JTextField();

        setName("Form"); // NOI18N

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        TAnnotations.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "Annotaton File"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        TAnnotations.setColumnSelectionAllowed(true);
        TAnnotations.setName("TAnnotations"); // NOI18N
        TAnnotations.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TAnnotationsMouseClicked(evt);
            }
        });
        TAnnotations.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TAnnotationsKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(TAnnotations);
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(edu.uncc.bioinformatics.quickloadbuilder.QuickLoadArchiveBuilderApp.class).getContext().getResourceMap(AnnotationFiles.class);
        TAnnotations.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        TAnnotations.getColumnModel().getColumn(0).setResizable(false);
        TAnnotations.getColumnModel().getColumn(0).setHeaderValue(resourceMap.getString("TAnnotations.columnModel.title0")); // NOI18N

        jLabel2.setFont(resourceMap.getFont("jLabel2.font")); // NOI18N
        jLabel2.setText(resourceMap.getString("jLabel2.text")); // NOI18N
        jLabel2.setName("jLabel2"); // NOI18N

        Label.setName("Label"); // NOI18N

        jLabel3.setText(resourceMap.getString("jLabel3.text")); // NOI18N
        jLabel3.setName("jLabel3"); // NOI18N

        LoadHint.setText(resourceMap.getString("LoadHint.text")); // NOI18N
        LoadHint.setToolTipText(resourceMap.getString("LoadHint.toolTipText")); // NOI18N
        LoadHint.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        LoadHint.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        LoadHint.setName("LoadHint"); // NOI18N

        jLabel4.setText(resourceMap.getString("jLabel4.text")); // NOI18N
        jLabel4.setName("jLabel4"); // NOI18N

        Url.setName("Url"); // NOI18N
        Url.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                UrlCaretUpdate(evt);
            }
        });
        Url.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UrlActionPerformed(evt);
            }
        });

        Title.setName("Title"); // NOI18N
        Title.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TitleActionPerformed(evt);
            }
        });

        jLabel5.setText(resourceMap.getString("jLabel5.text")); // NOI18N
        jLabel5.setName("jLabel5"); // NOI18N

        NameLabel.setText(resourceMap.getString("NameLabel.text")); // NOI18N
        NameLabel.setName("NameLabel"); // NOI18N

        jLabel6.setText(resourceMap.getString("jLabel6.text")); // NOI18N
        jLabel6.setName("jLabel6"); // NOI18N

        Description.setName("Description"); // NOI18N

        Name.setText(resourceMap.getString("Name.text")); // NOI18N
        Name.setName("Name"); // NOI18N

        Connected.setText(resourceMap.getString("Connected.text")); // NOI18N
        Connected.setName("Connected"); // NOI18N

        jLabel8.setText(resourceMap.getString("jLabel8.text")); // NOI18N
        jLabel8.setName("jLabel8"); // NOI18N

        Collapsed.setText(resourceMap.getString("Collapsed.text")); // NOI18N
        Collapsed.setName("Collapsed"); // NOI18N

        ShowTracks.setText(resourceMap.getString("ShowTracks.text")); // NOI18N
        ShowTracks.setName("ShowTracks"); // NOI18N

        DirectionType.setName("DirectionType"); // NOI18N

        jLabel9.setText(resourceMap.getString("jLabel9.text")); // NOI18N
        jLabel9.setName("jLabel9"); // NOI18N

        jLabel10.setText(resourceMap.getString("jLabel10.text")); // NOI18N
        jLabel10.setName("jLabel10"); // NOI18N

        jLabel11.setText(resourceMap.getString("jLabel11.text")); // NOI18N
        jLabel11.setName("jLabel11"); // NOI18N

        jLabel12.setText(resourceMap.getString("jLabel12.text")); // NOI18N
        jLabel12.setName("jLabel12"); // NOI18N

        jLabel13.setText(resourceMap.getString("jLabel13.text")); // NOI18N
        jLabel13.setName("jLabel13"); // NOI18N

        BackgroundColorButton.setBackground(resourceMap.getColor("BackgroundColorButton.background")); // NOI18N
        BackgroundColorButton.setText(resourceMap.getString("BackgroundColorButton.text")); // NOI18N
        BackgroundColorButton.setName("BackgroundColorButton"); // NOI18N
        BackgroundColorButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackgroundColorButtonActionPerformed(evt);
            }
        });

        PositiveStrandColorButton.setText(resourceMap.getString("PositiveStrandColorButton.text")); // NOI18N
        PositiveStrandColorButton.setName("PositiveStrandColorButton"); // NOI18N
        PositiveStrandColorButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PositiveStrandColorButtonActionPerformed(evt);
            }
        });

        NegativeStrandColorButton.setText(resourceMap.getString("NegativeStrandColorButton.text")); // NOI18N
        NegativeStrandColorButton.setName("NegativeStrandColorButton"); // NOI18N
        NegativeStrandColorButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NegativeStrandColorButtonActionPerformed(evt);
            }
        });

        ViewMode.setName("ViewMode"); // NOI18N

        BackgroundColor.setText(resourceMap.getString("BackgroundColor.text")); // NOI18N
        BackgroundColor.setName("BackgroundColor"); // NOI18N
        BackgroundColor.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                BackgroundColorCaretUpdate(evt);
            }
        });

        PositiveStrandColor.setText(resourceMap.getString("PositiveStrandColor.text")); // NOI18N
        PositiveStrandColor.setName("PositiveStrandColor"); // NOI18N
        PositiveStrandColor.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                PositiveStrandColorCaretUpdate(evt);
            }
        });

        NegativeStrandColor.setText(resourceMap.getString("NegativeStrandColor.text")); // NOI18N
        NegativeStrandColor.setName("NegativeStrandColor"); // NOI18N
        NegativeStrandColor.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                NegativeStrandColorCaretUpdate(evt);
            }
        });

        BackgroundColorLabel.setText(resourceMap.getString("BackgroundColorLabel.text")); // NOI18N
        BackgroundColorLabel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        BackgroundColorLabel.setName("BackgroundColorLabel"); // NOI18N

        PositiveStrandColorLabel.setText(resourceMap.getString("PositiveStrandColorLabel.text")); // NOI18N
        PositiveStrandColorLabel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        PositiveStrandColorLabel.setName("PositiveStrandColorLabel"); // NOI18N

        NegativeStrandColorLabel.setText(resourceMap.getString("NegativeStrandColorLabel.text")); // NOI18N
        NegativeStrandColorLabel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        NegativeStrandColorLabel.setName("NegativeStrandColorLabel"); // NOI18N

        BackgroundError.setText(resourceMap.getString("BackgroundError.text")); // NOI18N
        BackgroundError.setName("BackgroundError"); // NOI18N

        PositiveStrandError.setText(resourceMap.getString("PositiveStrandError.text")); // NOI18N
        PositiveStrandError.setName("PositiveStrandError"); // NOI18N

        NegativeStrandError.setText(resourceMap.getString("NegativeStrandError.text")); // NOI18N
        NegativeStrandError.setName("NegativeStrandError"); // NOI18N

        UrlError.setText(resourceMap.getString("UrlError.text")); // NOI18N
        UrlError.setName("UrlError"); // NOI18N

        MaxDepthLabel.setText(resourceMap.getString("MaxDepthLabel.text")); // NOI18N
        MaxDepthLabel.setName("MaxDepthLabel"); // NOI18N

        jLabel7.setText(resourceMap.getString("jLabel7.text")); // NOI18N
        jLabel7.setName("jLabel7"); // NOI18N

        NameSize.setName("NameSize"); // NOI18N
        NameSize.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NameSizeActionPerformed(evt);
            }
        });

        MaxDepth.setText(resourceMap.getString("MaxDepth.text")); // NOI18N
        MaxDepth.setName("MaxDepth"); // NOI18N
        MaxDepth.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                MaxDepthCaretUpdate(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(40, 40, 40))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel13)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 653, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel12)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 577, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 584, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 646, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6)
                            .addComponent(jLabel4)
                            .addComponent(NameLabel)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 185, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Name)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(Description)
                                .addComponent(Url, javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(Label, javax.swing.GroupLayout.DEFAULT_SIZE, 404, Short.MAX_VALUE)
                                .addComponent(UrlError, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(Title, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 464, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(jLabel8)
                    .addComponent(LoadHint, javax.swing.GroupLayout.DEFAULT_SIZE, 735, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel9)
                            .addComponent(Connected)
                            .addComponent(MaxDepthLabel)
                            .addComponent(jLabel7))
                        .addGap(206, 206, 206)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(Collapsed)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 217, Short.MAX_VALUE)
                                .addComponent(ShowTracks))
                            .addComponent(ViewMode, javax.swing.GroupLayout.Alignment.TRAILING, 0, 424, Short.MAX_VALUE)
                            .addComponent(DirectionType, 0, 424, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(NegativeStrandColor)
                                    .addComponent(PositiveStrandColor)
                                    .addComponent(BackgroundColor, javax.swing.GroupLayout.DEFAULT_SIZE, 104, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(NegativeStrandError, javax.swing.GroupLayout.DEFAULT_SIZE, 140, Short.MAX_VALUE)
                                    .addComponent(BackgroundError, javax.swing.GroupLayout.DEFAULT_SIZE, 140, Short.MAX_VALUE)
                                    .addComponent(PositiveStrandError, javax.swing.GroupLayout.DEFAULT_SIZE, 140, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(NegativeStrandColorLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 52, Short.MAX_VALUE)
                                    .addComponent(PositiveStrandColorLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(BackgroundColorLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(BackgroundColorButton, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(PositiveStrandColorButton, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(NegativeStrandColorButton, javax.swing.GroupLayout.Alignment.TRAILING)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(NameSize, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(MaxDepth, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 104, Short.MAX_VALUE)))))
                .addGap(62, 62, 62))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(NameLabel)
                            .addComponent(Name))
                        .addGap(15, 15, 15)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(Title, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel6)
                            .addComponent(Description, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(Url, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(UrlError, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(Label, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(LoadHint, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel8)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9)
                            .addComponent(DirectionType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel10)
                            .addComponent(BackgroundColor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(BackgroundColorButton)
                            .addComponent(BackgroundColorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(BackgroundError, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel11)
                            .addComponent(PositiveStrandColor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(PositiveStrandColorButton)
                            .addComponent(PositiveStrandColorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(PositiveStrandError, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel12)
                                    .addComponent(NegativeStrandColor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(NegativeStrandColorButton)
                                    .addComponent(NegativeStrandColorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(NegativeStrandError, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel13)
                            .addComponent(ViewMode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Connected)
                            .addComponent(ShowTracks)
                            .addComponent(Collapsed))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(NameSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(MaxDepthLabel)
                            .addComponent(MaxDepth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 634, Short.MAX_VALUE))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void UrlActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UrlActionPerformed
    }
        // TODO add your handling code here:     }      public JTextField getDescriptionTextField() {         return DescriptionTextField;     }      public JTextField getLabelTextField() {         return LabelTextField;     }      public JCheckBox getLoadHintCheckBox() {         return LoadHintCheckBox;     }      public JLabel getNameLabel() {         return NameLabel;     }      public JTextField getTitleTextField() {         return TitleTextField;     }      public JTextField getUrlTextField() {         return UrlTextField;     }//GEN-LAST:event_UrlActionPerformed

        private void TitleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TitleActionPerformed
        // TODO add your handling code here:}//GEN-LAST:event_TitleActionPerformed
        }
        private void TAnnotationsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TAnnotationsMouseClicked
       updateAnnotationAttributes();
    }//GEN-LAST:event_TAnnotationsMouseClicked
    
        
    public void saveAnnotOnUIToMap(){
         Annotation l_annot = (Annotation) Parent.MAnnotations.values().toArray()[LastIndex];
            l_annot.Description = Description.getText();
            l_annot.Url = URI.create( Url.getText() );
            l_annot.Label = Label.getText();
            l_annot.LoadHint = LoadHint.isSelected();
            l_annot.DirectionType = DirectionType.getSelectedItem().toString();
            try{
                l_annot.MaxDepth = Integer.parseInt( MaxDepth.getText() );
            }catch( NumberFormatException e){
                l_annot.MaxDepth = Annotation.MAX_DEPTH_DEFAULT;
            }
            l_annot.NameSize = (Float) NameSize.getSelectedItem() ;
            
            String background_color = BackgroundColor.getText();
            if( background_color.equals("")){
                l_annot.BackgroundColor = null;
            }else{
                l_annot.BackgroundColor = Color.decode( "0x"+BackgroundColor.getText() );
            }
            String positive_color = PositiveStrandColor.getText();
            if( positive_color.equals("")){
                l_annot.PositiveStrandColor = null;
            }else{
                l_annot.PositiveStrandColor = Color.decode( "0x"+PositiveStrandColor.getText() );
            }
            String negative_color = NegativeStrandColor.getText();
            if( negative_color.equals("") ){
                l_annot.NegativeStrandColor = null;
            }else{
                l_annot.NegativeStrandColor = Color.decode( "0x"+NegativeStrandColor.getText() );
            }
            l_annot.ViewMode = ViewMode.getSelectedItem().toString();
            l_annot.Connected = Connected.isSelected();
            l_annot.Collapsed = Collapsed.isSelected();
            l_annot.ShowTracks = ShowTracks.isSelected();
    }    
    
    public void loadAnnotOnUIFromMap(int selected){
        Annotation annot = (Annotation) Parent.MAnnotations.values().toArray()[selected];
        Name.setText( annot.getName() );
        Title.setText(annot.Title);
        Description.setText( annot.Description );

        Url.setText( getUrl( annot.Url )  );

        Label.setText( annot.Label );
        LoadHint.setSelected( annot.LoadHint );
        DirectionType.setSelectedIndex( Annotation.getIndexofDirectionType( annot.DirectionType ) );
        if( DirectionType.getSelectedItem() == null){
            DirectionType.setSelectedItem(Annotation.DirectionTypeValues[0]);//set to default if no value existed
        }

        BackgroundColor.setText( getColorString( annot.BackgroundColor)  );

        BackgroundColorLabel.setBackground( annot.BackgroundColor != null ? annot.BackgroundColor: DefaultColor  );

        PositiveStrandColor.setText( getColorString( annot.PositiveStrandColor ));

        PositiveStrandColorLabel.setBackground( annot.PositiveStrandColor != null ? annot.PositiveStrandColor: DefaultColor);

        NegativeStrandColor.setText( getColorString( annot.NegativeStrandColor) );

        NegativeStrandColorLabel.setBackground( annot.NegativeStrandColor != null ? annot.NegativeStrandColor : DefaultColor);

        MaxDepth.setText(""+ annot.MaxDepth );
        NameSize.setSelectedItem( annot.NameSize);


        ViewMode.setSelectedIndex( Annotation.getIndexofViewMode( annot.ViewMode) );
        if( ViewMode.getSelectedItem() == null){
            ViewMode.setSelectedItem( Annotation.ViewModeValues[0]);
        }
        Connected.setSelected( annot.Connected == null ? false : annot.Connected);
        Collapsed.setSelected( annot.Collapsed == null ? false: annot.Collapsed);
        ShowTracks.setSelected( annot.ShowTracks == null ? false: annot.ShowTracks);
    }
    
    public void updateAnnotationAttributes(){
         int selected = TAnnotations.getSelectedRow();
        //load the values into the GUI
        if( selected != -1 ){
            //save values to last Index.
            saveAnnotOnUIToMap();
            
            //set the selected row annot file
            loadAnnotOnUIFromMap(selected);
            //update last index
            LastIndex = selected;
        }
    }
        
        
    public String getColorString( Color color ){
        String s = "";
        if( color != null ){
            s = Integer.toHexString(color.getRGB()).substring(2);
        }
        return s;
    }
    public String getUrl( URI url){
        if( url  == null ){
            return "";
        }else{
            return url.toString();
        }
    }
        
    public void setColorAttribute(JLabel ColorLabel, JLabel ErrorLabel, JTextField ColorText){
        boolean valid = false;
        Color color = Color.black;
        try{
            color = Color.decode( "0x" + ColorText.getText() );
            valid = true;
        }catch( NumberFormatException e){ }
        if( !valid ){
            color = Color.black;
        }
        Color c = JColorChooser.showDialog( this,"Choose Color", color );
        if( c != null){
            ColorLabel.setOpaque(true);
            ColorLabel.setBackground( c );
            ColorText.setText( Integer.toHexString(  c.getRGB()).substring( 2 )  );
            ErrorLabel.setText("");
        }
    }
    
    public boolean validColor( String color_str ){
        boolean valid = false;
        Color color = Color.black;
        if( color_str.equals("")){
            valid = true; 
            return valid;
        }
        try{
            color = Color.decode( "0x" + color_str  );
            valid = true;
        }catch( NumberFormatException e){ }
        if( !valid ){
            color = Color.black;
        }
        return valid;
    }
    
    public void updateColor(JTextField ColorText , JLabel ColorLabel, JLabel Error){
        if( ! validColor( ColorText.getText()) ){
            Error.setText( C.getRed("Invalid color code"));
            TAnnotations.setEnabled(false);
            Parent.disableNext();
            Parent.disableBack();
        }else{
            String color_str = ColorText.getText();
            //empty color field is allowed, but we should not try to paint the label
            
            if( !color_str.equals("") ){
                Error.setText( C.getRed(""));
                Color color = Color.decode( "0x" + ColorText.getText()  );
                ColorLabel.setOpaque(true);
                ColorLabel.setBackground( color );
                TAnnotations.setEnabled(true);
                Parent.enableNext();
                Parent.enableBack();
            }
        }
    }
    boolean BackgroundColorValid;
    boolean PositiveColorValid;
    boolean NegativeColorValid;
    
    private void BackgroundColorButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackgroundColorButtonActionPerformed
       setColorAttribute( BackgroundColorLabel, BackgroundError, BackgroundColor );
    }//GEN-LAST:event_BackgroundColorButtonActionPerformed

    private void PositiveStrandColorButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PositiveStrandColorButtonActionPerformed
        setColorAttribute( PositiveStrandColorLabel, PositiveStrandError, PositiveStrandColor );
    }//GEN-LAST:event_PositiveStrandColorButtonActionPerformed

    private void NegativeStrandColorButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NegativeStrandColorButtonActionPerformed
        setColorAttribute( NegativeStrandColorLabel, NegativeStrandError, NegativeStrandColor );
    }//GEN-LAST:event_NegativeStrandColorButtonActionPerformed

    private void BackgroundColorCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_BackgroundColorCaretUpdate
        updateColor( BackgroundColor, BackgroundColorLabel, BackgroundError);
    }//GEN-LAST:event_BackgroundColorCaretUpdate

    private void PositiveStrandColorCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_PositiveStrandColorCaretUpdate
        updateColor( PositiveStrandColor, PositiveStrandColorLabel, PositiveStrandError);
    }//GEN-LAST:event_PositiveStrandColorCaretUpdate

    private void NegativeStrandColorCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_NegativeStrandColorCaretUpdate
       updateColor( NegativeStrandColor, NegativeStrandColorLabel, NegativeStrandError);
    }//GEN-LAST:event_NegativeStrandColorCaretUpdate

    private void UrlCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_UrlCaretUpdate
        String url_string = Url.getText();
        boolean valid = false;
        if( url_string.equals("")){
            valid = true;
        }else{
            try{ 
                URI uri = URI.create(url_string);
                valid = true;
            }catch( IllegalArgumentException e){
                valid = false;
            }
        }
        if( !valid){
            UrlError.setText( C.getRed("Invalid URL.  This field should be of the form http://domain.com/path/to/rsc"));
        }else{
            UrlError.setText( "" );
        }
    }//GEN-LAST:event_UrlCaretUpdate

    private void TAnnotationsKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TAnnotationsKeyReleased
        updateAnnotationAttributes();
    }//GEN-LAST:event_TAnnotationsKeyReleased

    private void NameSizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NameSizeActionPerformed
        //nothing
    }//GEN-LAST:event_NameSizeActionPerformed

    private void MaxDepthCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_MaxDepthCaretUpdate
        boolean valid = false;
        try{
            Integer.parseInt( MaxDepth.getText() );
            valid = true;
        }catch( NumberFormatException e ){
            valid = false;
        }
        if( valid){
            MaxDepth.setBorder( BorderFactory.createMatteBorder( 1, 1, 1, 1, Color.green));
        }else{
            MaxDepth.setBorder( BorderFactory.createMatteBorder( 1, 1, 1, 1, Color.red));
        }
    }//GEN-LAST:event_MaxDepthCaretUpdate
        
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField BackgroundColor;
    private javax.swing.JButton BackgroundColorButton;
    private javax.swing.JLabel BackgroundColorLabel;
    private javax.swing.JLabel BackgroundError;
    private javax.swing.JCheckBox Collapsed;
    private javax.swing.JCheckBox Connected;
    private javax.swing.JTextField Description;
    private javax.swing.JComboBox DirectionType;
    private javax.swing.JTextField Label;
    private javax.swing.JCheckBox LoadHint;
    private javax.swing.JTextField MaxDepth;
    private javax.swing.JLabel MaxDepthLabel;
    private javax.swing.JLabel Name;
    private javax.swing.JLabel NameLabel;
    private javax.swing.JComboBox NameSize;
    private javax.swing.JTextField NegativeStrandColor;
    private javax.swing.JButton NegativeStrandColorButton;
    private javax.swing.JLabel NegativeStrandColorLabel;
    private javax.swing.JLabel NegativeStrandError;
    private javax.swing.JTextField PositiveStrandColor;
    private javax.swing.JButton PositiveStrandColorButton;
    private javax.swing.JLabel PositiveStrandColorLabel;
    private javax.swing.JLabel PositiveStrandError;
    private javax.swing.JCheckBox ShowTracks;
    private javax.swing.JTable TAnnotations;
    private javax.swing.JTextField Title;
    private javax.swing.JTextField Url;
    private javax.swing.JLabel UrlError;
    private javax.swing.JComboBox ViewMode;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

    
}
