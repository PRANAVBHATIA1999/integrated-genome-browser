/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * QuickloadServerRoot.java
 *
 * Created on Sep 23, 2011, 1:46:38 PM
 */
package edu.uncc.bioinformatics.quickloadbuilder;

import java.awt.Color;
import java.io.File;
import javax.swing.BorderFactory;
import javax.swing.JFileChooser;
import org.jdesktop.application.FrameView;
import org.jdesktop.application.ResourceMap;

/**
 *
 * @author jfvillal
 */
public class QuickloadServerRoot extends javax.swing.JPanel {
    public static final String QUICKLOAD = "quickload";
    QuickLoadArchiveBuilderView Parent;
    boolean Initialized;
    /** Creates new form QuickloadServerRoot */
    public QuickloadServerRoot( QuickLoadArchiveBuilderView parent) {
        Initialized = false;
        Parent = parent;
        initComponents();
        
        String home = System.getProperty("user.home");
        this.NonDefaultPath = home;
        QuickloadPath.setText( home );
        
        this.NonDefaultName = QUICKLOAD;
        QuickloadName.setText(QUICKLOAD);
        
        ResourceMap resourceMap = parent.getResourceMap();
        Logo.setIcon( resourceMap.getIcon( "WelcomeIcon" ) );
        updateControls();
        Initialized = true;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Logo = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        QuickloadPath = new javax.swing.JTextField();
        Browse = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        QuickloadName = new javax.swing.JTextField();
        UseDefaults = new javax.swing.JCheckBox();
        ArchivePathError = new javax.swing.JLabel();
        ArchiveNameError = new javax.swing.JLabel();

        setName("Form"); // NOI18N

        Logo.setName("Logo"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(edu.uncc.bioinformatics.quickloadbuilder.QuickLoadArchiveBuilderApp.class).getContext().getResourceMap(QuickloadServerRoot.class);
        jLabel2.setFont(resourceMap.getFont("jLabel2.font")); // NOI18N
        jLabel2.setText(resourceMap.getString("jLabel2.text")); // NOI18N
        jLabel2.setName("jLabel2"); // NOI18N

        QuickloadPath.setText(resourceMap.getString("QuickloadPath.text")); // NOI18N
        QuickloadPath.setName("QuickloadPath"); // NOI18N
        QuickloadPath.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                QuickloadPathCaretUpdate(evt);
            }
        });

        Browse.setText(resourceMap.getString("Browse.text")); // NOI18N
        Browse.setName("Browse"); // NOI18N
        Browse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BrowseActionPerformed(evt);
            }
        });

        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N

        jLabel3.setText(resourceMap.getString("jLabel3.text")); // NOI18N
        jLabel3.setName("jLabel3"); // NOI18N

        QuickloadName.setText(resourceMap.getString("QuickloadName.text")); // NOI18N
        QuickloadName.setName("QuickloadName"); // NOI18N
        QuickloadName.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                QuickloadNameCaretUpdate(evt);
            }
        });

        UseDefaults.setSelected(true);
        UseDefaults.setText(resourceMap.getString("UseDefaults.text")); // NOI18N
        UseDefaults.setName("UseDefaults"); // NOI18N
        UseDefaults.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UseDefaultsActionPerformed(evt);
            }
        });

        ArchivePathError.setText(resourceMap.getString("ArchivePathError.text")); // NOI18N
        ArchivePathError.setName("ArchivePathError"); // NOI18N

        ArchiveNameError.setText(resourceMap.getString("ArchiveNameError.text")); // NOI18N
        ArchiveNameError.setName("ArchiveNameError"); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Logo, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(UseDefaults)
                    .addComponent(jLabel1)
                    .addComponent(jLabel3)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(QuickloadName, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 399, Short.MAX_VALUE)
                            .addComponent(QuickloadPath, javax.swing.GroupLayout.DEFAULT_SIZE, 399, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addComponent(Browse))
                    .addComponent(ArchivePathError)
                    .addComponent(ArchiveNameError))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(Logo, javax.swing.GroupLayout.DEFAULT_SIZE, 511, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(41, 41, 41)
                        .addComponent(jLabel2)
                        .addGap(66, 66, 66)
                        .addComponent(UseDefaults)
                        .addGap(77, 77, 77)
                        .addComponent(jLabel1)
                        .addGap(12, 12, 12)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Browse)
                            .addComponent(QuickloadPath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ArchivePathError)
                        .addGap(14, 14, 14)
                        .addComponent(jLabel3)
                        .addGap(18, 18, 18)
                        .addComponent(QuickloadName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(ArchiveNameError)))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents
    final JFileChooser fc = new JFileChooser();
    private void BrowseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BrowseActionPerformed
        fc.setMultiSelectionEnabled( false );
        fc.setFileSelectionMode( JFileChooser.DIRECTORIES_ONLY);
        int returnVal = fc.showOpenDialog( this );
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
            QuickloadPath.setText( file.getPath());
        } else {
            //do nothing
        }
    }//GEN-LAST:event_BrowseActionPerformed

    private void UseDefaultsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UseDefaultsActionPerformed
        updateControls();
    }//GEN-LAST:event_UseDefaultsActionPerformed

    private void QuickloadPathCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_QuickloadPathCaretUpdate
        if( Initialized){    
            checkQuickloadPathCorrect();
        }
    }//GEN-LAST:event_QuickloadPathCaretUpdate

    public void checkQuickloadPathCorrect(){
        String file_name = QuickloadPath.getText();
            File file = new File( file_name );
            if( !file.exists() ){
                //red box
                QuickloadPath.setBorder( BorderFactory.createMatteBorder( 1, 1, 1, 1, Color.red));
                ArchivePathError.setText( C.getRed( "The path does not exists." ) );
                PathApproved = false;
                
            }else{
                if( !file.isDirectory() ){
                    //red box
                    QuickloadPath.setBorder( BorderFactory.createMatteBorder( 1, 1, 1, 1, Color.red));
                    ArchivePathError.setText( C.getRed( "The path for the quickload archive must be an empty directory.") );
                    PathApproved = false;
                }else{
                    //green box
                    QuickloadPath.setBorder( BorderFactory.createMatteBorder( 1, 1, 1, 1, Color.green));
                    ArchivePathError.setText("");
                    PathApproved = true;
                }
            }
            updateNextButton();
    }
    
    public void checkQuickloadNameCorrect(){
        checkQuickloadPathCorrect();
            if( QuickloadName.getText().contains(" ")){
                QuickloadName.setBorder( BorderFactory.createMatteBorder( 1, 1, 1, 1, Color.red));
                ArchiveNameError.setText( C.getRed( "The quickload archive name must not contain spaces."));
                
                NameApproved = false;
            }else if ( QuickloadName.getText().equals("") ){
                QuickloadName.setBorder( BorderFactory.createMatteBorder( 1, 1, 1, 1, Color.red));
                ArchiveNameError.setText( C.getRed( "The quickload archive name must not not be empty."));
                
                NameApproved = false;
            }else{
                if( PathApproved ){
                    File f = new File( QuickloadPath.getText() 
                                        + System.getProperty("file.separator" ) 
                                        + QuickloadName.getText());
                    if( f.exists() ){
                        if( f.isDirectory() ){
                            if( f.listFiles().length > 0){
                                QuickloadName.setBorder( BorderFactory.createMatteBorder( 1, 1, 1, 1, Color.red));
                                ArchiveNameError.setText(C.getRed("The quickload directory must be empty."));
                                NameApproved = false;
                            }else{
                                QuickloadName.setBorder( BorderFactory.createMatteBorder( 1, 1, 1, 1, Color.green));
                                ArchiveNameError.setText("");
                                NameApproved = true;
                                CreateArchiveDir = false;
                            }
                        }else{
                            QuickloadName.setBorder( BorderFactory.createMatteBorder( 1, 1, 1, 1, Color.red));
                            ArchiveNameError.setText(C.getRed("The quickload directory must be an empty directory."));
                            NameApproved = false;
                        }
                    }else{
                        QuickloadName.setBorder( BorderFactory.createMatteBorder( 1, 1, 1, 1, Color.green));
                        ArchiveNameError.setText("");
                        CreateArchiveDir = true;
                        NameApproved = true;
                    }
                }else{
                    QuickloadName.setBorder( BorderFactory.createMatteBorder( 1, 1, 1, 1, Color.red));
                    ArchiveNameError.setText( C.getRed( "Error in archive path prevents validation of archive name.") );
                    NameApproved = false;
                }
            }
            updateNextButton();
    }
    
    private void QuickloadNameCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_QuickloadNameCaretUpdate
        if( Initialized){
            checkQuickloadNameCorrect();
        }
    }//GEN-LAST:event_QuickloadNameCaretUpdate

    boolean CreateArchiveDir = false;
    boolean PathApproved = false;
    boolean NameApproved = false;
    public void updateNextButton(){
        if( PathApproved && NameApproved ){
            Parent.enableNext();
        }else{
            Parent.disableNext();
        }
    }
    public String getArchivePath(){
        return QuickloadPath.getText() + System.getProperty("file.separator") + QuickloadName.getText();
        
    }
   
    public String NonDefaultPath;
    public String NonDefaultName;
    
    public void updateControls(){
        if( UseDefaults.isSelected() ){
            QuickloadName.setEnabled(false);
            QuickloadPath.setEnabled(false);
            Browse.setEnabled(false);
            
            NonDefaultPath = QuickloadPath.getText();
            NonDefaultName = QuickloadName.getText();
            
            String home = System.getProperty( "user.home");
            QuickloadPath.setText( home );
            QuickloadName.setText( QUICKLOAD );
            
        }else{
            QuickloadName.setEnabled(true);
            QuickloadPath.setEnabled(true);
            Browse.setEnabled(true);
            
            QuickloadPath.setText( this.NonDefaultPath );
            QuickloadName.setText( this.NonDefaultName );
            
            //quickload name correct also check for the path 
            checkQuickloadNameCorrect();
        }
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel ArchiveNameError;
    private javax.swing.JLabel ArchivePathError;
    private javax.swing.JButton Browse;
    private javax.swing.JLabel Logo;
    private javax.swing.JTextField QuickloadName;
    private javax.swing.JTextField QuickloadPath;
    private javax.swing.JCheckBox UseDefaults;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    // End of variables declaration//GEN-END:variables
}
