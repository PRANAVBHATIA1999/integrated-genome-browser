/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * GenusSpeciesName.java
 *
 * Created on Sep 27, 2011, 12:11:44 PM
 */
package edu.uncc.bioinformatics.quickloadbuilder;

import com.jidesoft.hints.ListDataIntelliHints;
import java.awt.Color;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import javax.swing.BorderFactory;
import org.jdesktop.application.FrameView;
import org.jdesktop.application.ResourceMap;

/**
 *
 * @author jfvillal
 */
public class GenusSpeciesName extends javax.swing.JPanel {
    boolean Initialized;
    QuickLoadArchiveBuilderView Parent;
    public static final String NUNLL_COMBO_BOX_VALUE = "--------";
    /** Creates new form GenusSpeciesName */
    @SuppressWarnings("unchecked")
    public GenusSpeciesName( QuickLoadArchiveBuilderView parent ) {
        Initialized = false;
         ResourceMap resourceMap = parent.getResourceMap();
        initComponents();
        Logo.setIcon( resourceMap.getIcon( "WelcomeIcon" ) );
        Date date = new Date( System.currentTimeMillis() );
        Calendar n = Calendar.getInstance();
        Year.addItem(NUNLL_COMBO_BOX_VALUE);
        for( int i = (n.get(Calendar.YEAR)) ; i > 1970  ; i--){
            Year.addItem(new Integer( i ));
        }
        
        String vals[] = "cat,dog,human,pig,rabbit".split(",");
        ArrayList<String> list = new ArrayList<String>();
        for( int i = 0 ; i < vals.length; i++){
            list.add(vals[i]);
        }
        
        ListDataIntelliHints intellihints = new ListDataIntelliHints(Genus, list );
        
        String vals2[] = "one,two,three,four".split(",");
        ArrayList<String> species_list = new ArrayList<String>();
        for( int i = 0 ; i < vals2.length; i++){
            species_list.add(vals2[i]);
        }
        
        ListDataIntelliHints intellihints2 = new ListDataIntelliHints(Species, species_list );
        Parent = parent;
        validateFields();
        Initialized = true;
    }
    /**
     * This is called just before this panel is put on focus.  This way, the single
     * card is used to show the genus_species for both new archives and to edit existing
     * archives  
     * 
     * @param bo true if creating a new archive, false if editing existing archive
     */
    public void setCreateOrEditArchive( boolean bo ){
        if( bo ){
            EditExistingSpecies.setVisible(false);
            NewGenusSpecies.setVisible(true);
        }else{
            EditExistingSpecies.setVisible(true);
            NewGenusSpecies.setVisible(false);
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Logo = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        EditExistingSpecies = new javax.swing.JComboBox();
        NewGenusSpecies = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        Year = new javax.swing.JComboBox();
        Subspecies = new javax.swing.JTextField();
        Species = new javax.swing.JTextField();
        GenusError = new javax.swing.JLabel();
        FolderName = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        SubspeciesError = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        Month = new javax.swing.JComboBox();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        Description = new javax.swing.JLabel();
        SpeciesError = new javax.swing.JLabel();
        Genus = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();

        setName("Form"); // NOI18N

        Logo.setName("Logo"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(edu.uncc.bioinformatics.quickloadbuilder.QuickLoadArchiveBuilderApp.class).getContext().getResourceMap(GenusSpeciesName.class);
        jLabel2.setFont(resourceMap.getFont("jLabel2.font")); // NOI18N
        jLabel2.setText(resourceMap.getString("jLabel2.text")); // NOI18N
        jLabel2.setName("jLabel2"); // NOI18N

        EditExistingSpecies.setName("EditExistingSpecies"); // NOI18N

        NewGenusSpecies.setName("NewGenusSpecies"); // NOI18N

        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N

        Year.setName("Year"); // NOI18N
        Year.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                YearActionPerformed(evt);
            }
        });

        Subspecies.setText(resourceMap.getString("Subspecies.text")); // NOI18N
        Subspecies.setName("Subspecies"); // NOI18N
        Subspecies.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                SubspeciesCaretUpdate(evt);
            }
        });

        Species.setText(resourceMap.getString("Species.text")); // NOI18N
        Species.setName("Species"); // NOI18N
        Species.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                SpeciesCaretUpdate(evt);
            }
        });

        GenusError.setText(resourceMap.getString("GenusError.text")); // NOI18N
        GenusError.setName("GenusError"); // NOI18N

        FolderName.setText(resourceMap.getString("FolderName.text")); // NOI18N
        FolderName.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        FolderName.setName("FolderName"); // NOI18N

        jLabel5.setText(resourceMap.getString("jLabel5.text")); // NOI18N
        jLabel5.setName("jLabel5"); // NOI18N

        jLabel3.setText(resourceMap.getString("jLabel3.text")); // NOI18N
        jLabel3.setName("jLabel3"); // NOI18N

        SubspeciesError.setText(resourceMap.getString("SubspeciesError.text")); // NOI18N
        SubspeciesError.setName("SubspeciesError"); // NOI18N

        jLabel4.setText(resourceMap.getString("jLabel4.text")); // NOI18N
        jLabel4.setName("jLabel4"); // NOI18N

        Month.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--------", "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "Dicember" }));
        Month.setName("Month"); // NOI18N
        Month.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MonthActionPerformed(evt);
            }
        });

        jLabel6.setText(resourceMap.getString("jLabel6.text")); // NOI18N
        jLabel6.setName("jLabel6"); // NOI18N

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jTextArea1.setName("jTextArea1"); // NOI18N
        jScrollPane1.setViewportView(jTextArea1);

        Description.setText(resourceMap.getString("Description.text")); // NOI18N
        Description.setName("Description"); // NOI18N

        SpeciesError.setText(resourceMap.getString("SpeciesError.text")); // NOI18N
        SpeciesError.setName("SpeciesError"); // NOI18N

        Genus.setText(resourceMap.getString("Genus.text")); // NOI18N
        Genus.setName("Genus"); // NOI18N
        Genus.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                GenusCaretUpdate(evt);
            }
        });

        jLabel7.setText(resourceMap.getString("jLabel7.text")); // NOI18N
        jLabel7.setName("jLabel7"); // NOI18N

        jLabel8.setText(resourceMap.getString("jLabel8.text")); // NOI18N
        jLabel8.setName("jLabel8"); // NOI18N

        javax.swing.GroupLayout NewGenusSpeciesLayout = new javax.swing.GroupLayout(NewGenusSpecies);
        NewGenusSpecies.setLayout(NewGenusSpeciesLayout);
        NewGenusSpeciesLayout.setHorizontalGroup(
            NewGenusSpeciesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(NewGenusSpeciesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(NewGenusSpeciesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(NewGenusSpeciesLayout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 586, Short.MAX_VALUE)
                        .addComponent(Month, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(NewGenusSpeciesLayout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 728, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel5)
                    .addGroup(NewGenusSpeciesLayout.createSequentialGroup()
                        .addGroup(NewGenusSpeciesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel8))
                        .addGap(63, 63, 63)
                        .addGroup(NewGenusSpeciesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 603, Short.MAX_VALUE)
                            .addGroup(NewGenusSpeciesLayout.createSequentialGroup()
                                .addComponent(Subspecies, javax.swing.GroupLayout.PREFERRED_SIZE, 509, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(GenusError, javax.swing.GroupLayout.DEFAULT_SIZE, 603, Short.MAX_VALUE)
                            .addComponent(SpeciesError, javax.swing.GroupLayout.DEFAULT_SIZE, 603, Short.MAX_VALUE)
                            .addComponent(SubspeciesError, javax.swing.GroupLayout.DEFAULT_SIZE, 603, Short.MAX_VALUE)
                            .addComponent(FolderName, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 603, Short.MAX_VALUE)
                            .addComponent(Year, 0, 603, Short.MAX_VALUE)
                            .addComponent(Species, javax.swing.GroupLayout.DEFAULT_SIZE, 603, Short.MAX_VALUE)
                            .addComponent(Genus, javax.swing.GroupLayout.DEFAULT_SIZE, 603, Short.MAX_VALUE)))
                    .addComponent(jLabel4)
                    .addComponent(Description))
                .addGap(22, 22, 22))
        );
        NewGenusSpeciesLayout.setVerticalGroup(
            NewGenusSpeciesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(NewGenusSpeciesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(NewGenusSpeciesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Genus, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(GenusError, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addGroup(NewGenusSpeciesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(Species, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(SpeciesError, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(9, 9, 9)
                .addGroup(NewGenusSpeciesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(Subspecies, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(SubspeciesError, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(15, 15, 15)
                .addGroup(NewGenusSpeciesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(Month, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(48, 48, 48)
                .addGroup(NewGenusSpeciesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(Year, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(35, 35, 35)
                .addGroup(NewGenusSpeciesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Description)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 135, Short.MAX_VALUE))
                .addGap(42, 42, 42)
                .addGroup(NewGenusSpeciesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel8)
                    .addComponent(FolderName, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Logo, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(106, 106, 106)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 130, Short.MAX_VALUE)
                        .addComponent(EditExistingSpecies, javax.swing.GroupLayout.PREFERRED_SIZE, 437, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(NewGenusSpecies, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Logo, javax.swing.GroupLayout.DEFAULT_SIZE, 655, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(EditExistingSpecies, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(40, 40, 40)
                .addComponent(NewGenusSpecies, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(33, 33, 33))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void GenusCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_GenusCaretUpdate
        if( validateFields()){
            updateFolderName();
        }
    }//GEN-LAST:event_GenusCaretUpdate

    private void SpeciesCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_SpeciesCaretUpdate
        if( validateFields()){
            updateFolderName();
        }
    }//GEN-LAST:event_SpeciesCaretUpdate

    private void SubspeciesCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_SubspeciesCaretUpdate
        if( validateFields()){
            updateFolderName();
        }
    }//GEN-LAST:event_SubspeciesCaretUpdate

    private void MonthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MonthActionPerformed
        if( validateFields()){
            updateFolderName();
        }
    }//GEN-LAST:event_MonthActionPerformed

    private void YearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_YearActionPerformed
         if( validateFields()){
            updateFolderName();
        }
    }//GEN-LAST:event_YearActionPerformed

    boolean Valid;
    public boolean validateFields(){
        //This means we are only using the combo box to set the species.
        if( !NewGenusSpecies.isVisible() ){
            return true;
        }
        if( Genus.getText().equals("")){
            Genus.setBorder( BorderFactory.createMatteBorder( 1, 1, 1, 1, Color.red));
            GenusError.setText(C.getRed("Genus name cannot be empty"));
            Valid = false;
        }else if( Genus.getText().contains(" ")){
            GenusError.setText(C.getRed("Genus name should not have spaces"));
            Genus.setBorder( BorderFactory.createMatteBorder( 1, 1, 1, 1, Color.red));
            Valid = false;
        }else{
            Genus.setBorder( BorderFactory.createMatteBorder( 1, 1, 1, 1, Color.green));
            GenusError.setText("");
            Valid = true;
        }
        if( Species.getText().equals("") ){
            Species.setBorder( BorderFactory.createMatteBorder( 1, 1, 1, 1, Color.red) );
            SpeciesError.setText(C.getRed("Species should not be emplty "));
            Valid = false;
        }else if( Species.getText().contains(" ") ){
            Species.setBorder( BorderFactory.createMatteBorder( 1, 1, 1, 1, Color.red) );
            SpeciesError.setText(C.getRed("Species should not have spaces "));
            Valid = false;
        }else{
            Species.setBorder( BorderFactory.createMatteBorder( 1, 1, 1, 1, Color.green) );
            SpeciesError.setText("");
            Valid = Valid && true; //takes into account previous check.
        }
        if( Subspecies.getText().contains(" " )){
            Subspecies.setBorder(BorderFactory.createMatteBorder( 1, 1, 1, 1, Color.red) );
            SubspeciesError.setText( C.getRed("Subspecies name should not have spaces"));
            Valid = false;
        }else{
            Valid = Valid && true; //takes into account previous two checks
            Subspecies.setBorder(BorderFactory.createMatteBorder( 1, 1, 1, 1, Color.green) );
            SubspeciesError.setText( "");
        }
        
        if( Year.getSelectedItem() instanceof String ){
            Year.setBorder(BorderFactory.createMatteBorder( 1, 1, 1, 1, Color.red) );
            Valid = false;
        }else{
            Year.setBorder(BorderFactory.createMatteBorder( 1, 1, 1, 1, Color.green) );
            Valid = Valid && true;
        }
        if( Month.getSelectedItem().equals( NUNLL_COMBO_BOX_VALUE ) ){
            Month.setBorder( BorderFactory.createMatteBorder( 1, 1, 1, 1, Color.red) );
            Valid = false;
        }else{
            Month.setBorder(BorderFactory.createMatteBorder( 1, 1, 1, 1, Color.green) );
            Valid = Valid && true;
        }
        if( Initialized ){
            if( !Valid ){
                Parent.disableNext();
            }else{
                Parent.enableNext();
            }
        }
        return Valid;
    }
    
    public void updateFolderName(){
        FolderName.setText( 
                Genus.getText().toUpperCase().charAt(0) + "_" 
                +  Species.getText().toLowerCase()
                + "_" + Subspecies.getText().toLowerCase()
                + "_"+ Month.getSelectedItem().toString() 
                + "_" + Year.getSelectedItem().toString() );
    }
    
    public String Capitalized( String str ){
        if( str.length() <= 1){
            return str.toLowerCase();
        }
        String first = str.substring(0, 1).toUpperCase();
        String two = str.substring(1, str.length()).toLowerCase();
        return first + two;
    }
    public String getSpeciesSelected(){
        if( NewGenusSpecies.isVisible()){
            return FolderName.getText();
        }else{
            return EditExistingSpecies.getSelectedItem().toString();    
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Description;
    private javax.swing.JComboBox EditExistingSpecies;
    private javax.swing.JLabel FolderName;
    private javax.swing.JTextField Genus;
    private javax.swing.JLabel GenusError;
    private javax.swing.JLabel Logo;
    private javax.swing.JComboBox Month;
    private javax.swing.JPanel NewGenusSpecies;
    private javax.swing.JTextField Species;
    private javax.swing.JLabel SpeciesError;
    private javax.swing.JTextField Subspecies;
    private javax.swing.JLabel SubspeciesError;
    private javax.swing.JComboBox Year;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables

    void setExistingConents(List<String> contentsFile) {
        for( String s : contentsFile ){
            EditExistingSpecies.addItem(s);
        }
    }

    public String getSpeciesDescription() {
        return Description.getText();
    }
}
