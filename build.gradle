import org.apache.tools.ant.filters.ReplaceTokens
import org.gradle.api.file.FileTree
import org.gradle.api.file.FileCollection

apply plugin: 'java'
apply plugin: 'maven'

group = 'com.affymetrix'

//Location to store webstart jars
libsDirName = '../main/target/webstart'
def mavenTargetDir = 'main/target'
def webStartDir = mavenTargetDir + '/webstart'
def signedLibDir = webStartDir+ '/signed'
def resourceDir = 'main/src/main/resources'

ext.commonProps = new Properties() 
ext.commonProps.load(new FileInputStream('core/common/src/main/resources/common.properties')) 
//remove minor version
version = commonProps.get('appVersion').substring(0,3)
//securely read in keystore info from disk
ext.props = new Properties() 
ext.props.load(new FileInputStream(System.getProperty("user.home")+'/build.properties')) 
project.setProperty('props', ext.props) 

description = "Small Project to bootstrap IGB's OSGI runtime"

sourceCompatibility = 1.6
targetCompatibility = 1.6

ext.mainClassName = "com.affymetrix.main.Main"
ext.applicationDefaultJvmArgs = ["-Xmx1g"]
ext.appleJvmArgs = ["-Xdock:name=IGB", "-Dapple.laf.useScreenMenuBar=true"]

def felixVersion = '4.2.2'

repositories {
    mavenLocal()
    maven { url "http://eos.transvar.org/nexus/content/repositories/releases" }
    maven { url "http://eos.transvar.org/nexus/content/repositories/freehep-maven/" }
    maven { url "http://eos.transvar.org/nexus/content/repositories/central/" }
}

//Need to be kept in sync with main project pom file - the plan is to migrate to gradle entirely, but the short term this manual sync is needed.
dependencies {
    compile(group: 'com.affymetrix', name: 'affymetrix-common', version:version) {
        exclude(module: '*')
    }
    compile(group: 'com.affymetrix', name: 'igb', version:version) {
        exclude(module: '*')
    }
    compile(group: 'org.apache.logging.log4j', name: 'log4j-api', version:'2.0-rc1') {
        exclude(module: '*')
    }
    compile group: 'org.apache.commons', name: 'commons-csv', version:'1.0-SNAPSHOT'
    compile group: 'commons-io', name: 'commons-io', version:'2.4'
    compile group: 'org.broad', name: 'bigwig', version:'1.0'
    compile group: 'commons-codec', name: 'commons-codec', version:'1.6'
    runtime(group: 'com.affymetrix', name: 'igb-service', version:version) {
        exclude(module: '*')
    }
    runtime(group: 'com.affymetrix', name: 'sharedLibWrapper', version:version) {
        exclude(module: '*')
    }
    runtime(group: 'com.affymetrix', name: 'heatmap-editor', version:version) {
        exclude(module: '*')
    }
    runtime(group: 'com.affymetrix', name: 'genometryImpl', version:version) {
        exclude(module: '*')
    }
    runtime(group: 'com.affymetrix', name: 'igbSwingExt', version:version) {
        exclude(module: '*')
    }
    runtime(group: 'com.affymetrix', name: 'window-service', version:version) {
        exclude(module: '*')
    }
    runtime(group: 'com.affymetrix', name: 'genoviz', version:'1.0') {
        exclude(module: '*')
    }
    compile(group: 'org.apache.felix', name: 'org.apache.felix.main', version:felixVersion) {
        exclude(module: '*')
    }
    runtime(group: 'com.affymetrix', name: 'apollo-library', version:version) {
        exclude(module: '*')
    }
    runtime(group: 'com.affymetrix', name: 'annotation-tab', version:version) {
        exclude(module: '*')
    }
    runtime(group: 'com.affymetrix', name: 'bigBedHandler', version:version) {
        exclude(module: '*')
    }
    runtime(group: 'com.affymetrix', name: 'bigWigHandler', version:version) {
        exclude(module: '*')
    }
    runtime(group: 'com.affymetrix', name: 'bookmark', version:version) {
        exclude(module: '*')
    }
    runtime(group: 'com.affymetrix', name: 'externalView', version:version) {
        exclude(module: '*')
    }
    runtime(group: 'com.affymetrix', name: 'graphTab', version:version) {
        exclude(module: '*')
    }
    runtime(group: 'com.affymetrix', name: 'igbScript', version:version) {
        exclude(module: '*')
    }
    runtime(group: 'com.affymetrix', name: 'keyWordSearch', version:version) {
        exclude(module: '*')
    }
    runtime(group: 'com.affymetrix', name: 'ncbiBlast', version:version) {
        exclude(module: '*')
    }
    runtime(group: 'com.affymetrix', name: 'ncbiPrimer', version:version) {
        exclude(module: '*')
    }
    runtime(group: 'com.affymetrix', name: 'propertyView', version:version) {
        exclude(module: '*')
    }
    runtime(group: 'com.affymetrix', name: 'restrictionSites', version:version) {
        exclude(module: '*')
    }
    runtime(group: 'com.affymetrix', name: 'searchModelIdOrProps', version:version) {
        exclude(module: '*')
    }
    runtime(group: 'com.affymetrix', name: 'searchModeLucene', version:version) {
        exclude(module: '*')
    }
    runtime(group: 'com.affymetrix', name: 'searchView', version:version) {
        exclude(module: '*')
    }
    runtime(group: 'com.affymetrix', name: 'sequenceViewer', version:version) {
        exclude(module: '*')
    }
    runtime(group: 'com.affymetrix', name: 'survey', version:version) {
        exclude(module: '*')
    }
    runtime(group: 'com.affymetrix', name: 'thresholding', version:version) {
        exclude(module: '*')
    }
    runtime(group: 'com.affymetrix', name: 'tutorial', version:version) {
        exclude(module: '*')
    }
    runtime(group: 'com.affymetrix', name: 'update', version:version) {
        exclude(module: '*')
    }
    runtime(group: 'com.affymetrix', name: 'pluginsPage', version:version) {
        exclude(module: '*')
    }
    runtime(group: 'com.affymetrix', name: 'windowsServiceDef', version:version){
        exclude(module: '*')
    }
    runtime(group: 'com.google.guava', name: 'guava', version:'16.0.1') {
        exclude(module: '*')
    }
    runtime(group: 'org.apache.commons', name: 'commons-lang3', version:'3.1') {
        exclude(module: '*')
    }
    runtime(group: 'org.apache.commons', name: 'commons-compress', version:'1.2') {
        exclude(module: '*')
    }
    runtime(group: 'commons-pool', name: 'commons-pool', version:'1.6') {
        exclude(module: '*')
    }
    runtime(group: 'com.jidesoft', name: 'jide-ultimate', version:'3.5.15') {
        exclude(module: '*')
    }
    
}

clean{
    delete webStartDir
}

task checkOS() {
    ext.osName = System.properties['os.name'].toLowerCase()
    if (osName.contains('mac')) {
        applicationDefaultJvmArgs.addAll(appleJvmArgs)
    } 
}

sourceSets {
    main {
        java {
            srcDir 'main/src/main/java'
        }
        resources {
            srcDir resourceDir
            exclude '**/JNLP-INF/*'
        }
    }
}

task run(dependsOn: classes, type: JavaExec) {
    main = mainClassName
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
    jvmArgs = applicationDefaultJvmArgs
}

task(runDebug, dependsOn: 'classes', type: JavaExec) {
    main = mainClassName
    classpath = sourceSets.main.runtimeClasspath
    jvmArgs = ["-Xdebug", "-Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=8787"]
}

task cbc(dependsOn: classes, type: JavaExec) {
    main = "com.affymetrix.main.ClearBundleCache" 
    classpath = sourceSets.main.runtimeClasspath
}


task copyToLib(type: Copy) {
    new File(webStartDir + '/lib').mkdirs()
    into webStartDir + '/lib'
    from configurations.runtime
}

task generateSmallJnlp(type: Copy){
    def props =  project.getProperties().get('props')
    from resourceDir + '/JNLP-INF'
    into webStartDir
    include('jnlpTemplate.xml')
    rename('jnlpTemplate.xml','igb.jnlp')
    // Use some of the filters provided by Ant
    filter(ReplaceTokens, tokens: [
            "jnlp.version": version, 
            "jnlp.codebase": System.getProperty('codebaseUrl'), //note: this is passed in by jenkins or should be defined locally (i.e. gradle generateWebstart -DcodebaseUrl=example.com)
            "jnlp.jarName":'igb_exe', 
            "jnlp.maxHeapSize": '1024m'])
}

task generateMediumJnlp(type: Copy) {
    from resourceDir + '/JNLP-INF'
    into webStartDir
    include('jnlpTemplate.xml')
    rename('jnlpTemplate.xml','igb-large.jnlp')
    // Use some of the filters provided by Ant
    filter(ReplaceTokens, tokens: [
            "jnlp.version": version, 
            "jnlp.codebase": System.getProperty('codebaseUrl'), //note: this is passed in by jenkins or should be defined locally (i.e. gradle generateWebstart -DcodebaseUrl=example.com)
            "jnlp.jarName":'igb_exe-large', 
            "jnlp.maxHeapSize": '2048m'])
}

task generateLargeJnlp(type: Copy) {
    from resourceDir + '/JNLP-INF'
    into webStartDir
    include('jnlpTemplate.xml')
    rename('jnlpTemplate.xml','igb-5GB.jnlp')
    // Use some of the filters provided by Ant
    filter(ReplaceTokens, tokens: [
            "jnlp.version": version, 
            "jnlp.codebase": System.getProperty('codebaseUrl'), //note: this is passed in by jenkins or should be defined locally (i.e. gradle generateWebstart -DcodebaseUrl=example.com)
            "jnlp.jarName":'igb_exe-5GB', 
            "jnlp.maxHeapSize": '5120m'])
}

task generateSmallJnlpTemplate(type: Copy, dependsOn: [generateSmallJnlp]){
    File dest = new File(webStartDir + '/tmp/smallJar/JNLP-INF')
    from webStartDir
    include 'igb.jnlp'
    rename('igb.jnlp', 'APPLICATION_TEMPLATE.JNLP')
    into webStartDir + '/tmp/smallJar/JNLP-INF'
}
task generateMediumJnlpTemplate(type: Copy, dependsOn: [generateSmallJnlp]){
    File dest = new File(webStartDir + '/tmp/mediumJar/JNLP-INF')
    from webStartDir
    include 'igb-large.jnlp'
    rename('igb-large.jnlp', 'APPLICATION_TEMPLATE.JNLP')
    into dest
}

task generateLargeJnlpTemplate(type: Copy, dependsOn: [generateSmallJnlp]){
    File dest = new File(webStartDir + '/tmp/largeJar/JNLP-INF')
    from webStartDir
    include 'igb-5GB.jnlp'
    rename('igb-5GB.jnlp', 'APPLICATION_TEMPLATE.JNLP')
    into dest
}

task webstartSmallJar(type: Jar, dependsOn: [classes, generateSmallJnlpTemplate]) {
    archiveName = 'igb_exe.jar'
    from fileTree(dir: webStartDir + '/tmp/smallJar/')
    from 'build/classes/main'
    from 'build/resources/main'
    from webStartDir+'/lib'
    exclude 'org.apache.felix.main-*.jar', 'org.apache.felix.framework*.jar'
    from zipTree(webStartDir+'/lib' + '/affymetrix-common-'+version+'.jar')
    exclude "META-INF/**"
    from zipTree(webStartDir+'/lib' + '/org.apache.felix.main-'+felixVersion+'.jar')
    exclude "META-INF/**" 
    metaInf{
        from (resourceDir+'/META-INF/services')
        into 'services'
    }
    manifest{
        attributes(
        "Application-Name": "IGB",   
        "Permissions":"all-permissions",
        "Created-By":"Loraine lab",
        "Main-Class": 'com.affymetrix.main.Main',
        )
    }
}

task webstartMediumJar(type: Jar, dependsOn: [classes, generateMediumJnlpTemplate]) {
    archiveName = 'igb_exe-large.jar'
    from fileTree(dir: webStartDir + '/tmp/mediumJar/')
    from 'build/classes/main'
    from 'build/resources/main'
    from webStartDir+'/lib'
    exclude 'org.apache.felix.main-*.jar', 'org.apache.felix.framework*.jar'
    from zipTree(webStartDir+'/lib' + '/affymetrix-common-' + version + '.jar')
    exclude "META-INF/**"
    from zipTree(webStartDir+'/lib' + '/org.apache.felix.main-4.2.1.jar')
    exclude "META-INF/**" 
    metaInf{
        from (resourceDir+'/META-INF/services')
        into 'services'
    }
    manifest{
        attributes(
        "Application-Name": "IGB",   
        "Permissions":"all-permissions",
        "Created-By":"Loraine lab",
        "Main-Class": 'com.affymetrix.main.Main',
        )
    }
}

task webstartLargeJar(type: Jar, dependsOn: [classes, generateLargeJnlpTemplate]) {
    archiveName = 'igb_exe-5GB.jar'
    from fileTree(dir: webStartDir + '/tmp/largeJar/')
    from 'build/classes/main'
    from 'build/resources/main'
    from webStartDir+'/lib'
    exclude 'org.apache.felix.main-*.jar', 'org.apache.felix.framework*.jar'
    from zipTree(webStartDir+'/lib' + '/affymetrix-common-' + version + '.jar')
    exclude "META-INF/**"
    from zipTree(webStartDir+'/lib' + '/org.apache.felix.main-4.2.1.jar')
    exclude "META-INF/**" 
    metaInf{
        from (resourceDir+'/META-INF/services')
        into 'services'
    }
     manifest{
        attributes(
        "Application-Name": "IGB",   
        "Permissions":"all-permissions",
        "Created-By":"Loraine lab",
        "Main-Class": 'com.affymetrix.main.Main',
        )
    }
}

task copyWebstartResources(type: Copy) {
    from 'core/common/src/main/resources/images/'
    include 'igb.gif'
    from 'core/igb/src/main/resources/'
    include 'igb_default_prefs.xml'
    rename('igb_default_prefs.xml','igb_prefs.xml')
    into webStartDir
}

task signWebstartJars(dependsOn: [webstartSmallJar, webstartMediumJar, webstartLargeJar]) << {
    def props =  project.getProperties().get('props')
    FileTree webStartJars = fileTree(dir: webStartDir)  
    webStartJars.include 'igb_exe*.jar'
    webStartJars.each {File file ->
        ant.signjar(
            destDir: webStartDir,
            alias: props.get('keyStoreAlias'),
            jar: file,
            keystore: System.getProperty("user.home")+'/.keystore', 
            storepass: props.get('keypass'),
            keypass: props.get('keypass'),
            preservelastmodified: 'true')
    }   
}

task generateJnlps(type: Copy, dependsOn: [generateSmallJnlp, generateMediumJnlp, generateLargeJnlp]) {
    println 'Generating jnlp files...'
    new File('main/target').mkdir()
}

task generateWebstart(dependsOn: [webstartSmallJar, webstartMediumJar, webstartLargeJar, generateJnlps, copyWebstartResources, signWebstartJars]){
    println 'Generating Webstart Artifacts'
}

task packageRelease(type: Zip){
    archiveName 'igb.zip'
    from '.'
    fileMode 0755
    include 'NOTICES.txt', 'LICENSE.html', 'README.txt', 'run_*', 'igb_exe.jar'
}
