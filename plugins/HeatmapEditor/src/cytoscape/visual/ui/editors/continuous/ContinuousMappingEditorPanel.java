package cytoscape.visual.ui.editors.continuous;

import org.jdesktop.swingx.JXMultiThumbSlider;
import org.jdesktop.swingx.multislider.Thumb;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.event.ActionEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.image.BufferedImage;

import java.beans.PropertyChangeListener;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JSpinner;
import javax.swing.SpinnerNumberModel;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;

/**
 * Abstract class for all Continuous Mapping Editors.
 * 
 * @version 0.5
 * @since Cytoscape 2.5
 * @author kono
 */
public abstract class ContinuousMappingEditorPanel extends JDialog implements
		PropertyChangeListener {

	private static final long serialVersionUID = -2558647616344119220L;

	// Tell vizMapper main which editor is disabled/enabled.
	/**
	 * DOCUMENT ME!
	 */
	public static final String EDITOR_WINDOW_CLOSED = "EDITOR_WINDOW_CLOSED";

	/**
	 * DOCUMENT ME!
	 */
	public static final String EDITOR_WINDOW_OPENED = "EDITOR_WINDOW_OPENED";

	/*
	 * Used by trackrenderers.
	 */
	protected static final String BELOW_VALUE_CHANGED = "BELOW_VALUE_CHANGED";
	protected static final String ABOVE_VALUE_CHANGED = "ABOVE_VALUE_CHANGED";

	protected Object below;
	protected Object above;

	protected static ContinuousMappingEditorPanel editor;

	protected static boolean updatePending = false;
	protected static boolean updating = false;

	protected double lastSpinnerNumber = 0;

	/** Creates new form ContinuousMapperEditorPanel */
	public ContinuousMappingEditorPanel() {
		super();
		initComponents();

		initRangeValues();
		setSpinners();
		// this.addWindowListener(new WindowAdapter() {
		// public void windowOpened(WindowEvent e) {
		// firePropertyChange(EDITOR_WINDOW_OPENED, null, type);
		// }
		//
		// public void windowClosing(WindowEvent e) {
		// firePropertyChange(EDITOR_WINDOW_CLOSED, this, type);
		// }
		// });
	}

	/**
	 * Dynamically generate small icons from continuous mappers.
	 * 
	 * @param width
	 *            DOCUMENT ME!
	 * @param height
	 *            DOCUMENT ME!
	 * @param type
	 *            DOCUMENT ME!
	 * 
	 * @return DOCUMENT ME!
	 */
	public static ImageIcon getIcon(final int width, final int height) {
		return GradientEditorPanel.getIcon(width, height);
	}

	protected void setSpinners() {
		final Class dataType = null;
		setSpinner();
		if (dataType == Color.class) {
		} else if (dataType == Number.class) {
			setPropertySpinner();
		} else {
		}
	}

	protected void setSpinner() {
		SpinnerNumberModel spinnerModel = new SpinnerNumberModel(0.0d,
				Float.NEGATIVE_INFINITY, Float.POSITIVE_INFINITY, 0.01d);
		spinnerModel.addChangeListener(new SpinnerChangeListener(spinnerModel));
		valueSpinner.setModel(spinnerModel);
	}

	protected void setPropertySpinner() {
		SpinnerNumberModel propertySpinnerModel = new SpinnerNumberModel(0.0d,
				Float.NEGATIVE_INFINITY, Float.POSITIVE_INFINITY, 0.01d);
		propertySpinnerModel
				.addChangeListener(new PropertySpinnerChangeListener(
						propertySpinnerModel));
		propertySpinner.setModel(propertySpinnerModel);
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */

	// <editor-fold defaultstate="collapsed" desc=" Generated Code ">
	@SuppressWarnings("unchecked")
	private void initComponents() {
		JPanel mainPanel = new JPanel();

		abovePanel = new BelowAndAbovePanel(Color.yellow, false);
		abovePanel.setName("abovePanel");
		belowPanel = new BelowAndAbovePanel(Color.white, true);
		belowPanel.setName("belowPanel");

		abovePanel.setPreferredSize(new Dimension(16, 1));
		belowPanel.setPreferredSize(new Dimension(16, 1));

		rangeSettingPanel = new javax.swing.JPanel();
		addButton = new javax.swing.JButton();
		deleteButton = new javax.swing.JButton();

		// New in 2.6
		minMaxButton = new javax.swing.JButton();

		okButton = new javax.swing.JButton();
		cancelButton = new javax.swing.JButton();

		slider = new JXMultiThumbSlider<Color>();
		slider.setModel(new MultiColorThumbModel());
		iconPanel = new YValueLegendPanel();

		valueSpinner = new JSpinner();
		valueSpinner.setEnabled(false);
		valueLabel = new JLabel("Attribute Value");
		valueLabel.setLabelFor(valueSpinner);

		// We use the colorButton for both discrete and color
		colorButton = new javax.swing.JButton("Change");
		colorButton.setMargin(new java.awt.Insets(2, 2, 2, 2));
		colorButton.setEnabled(false);
		propertyComponent = colorButton;
		propertyLabel = new JLabel("Color Name");
		propertyLabel.setLabelFor(propertyComponent);

		rotaryEncoder = new JXMultiThumbSlider();

		iconPanel.setPreferredSize(new Dimension(25, 1));

		mainPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 5,
				5, 5));

		rangeSettingPanel.setBorder(javax.swing.BorderFactory
				.createTitledBorder(null, "Handle Settings",
						javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION,
						javax.swing.border.TitledBorder.DEFAULT_POSITION,
						new java.awt.Font("SansSerif", 1, 10),
						new java.awt.Color(0, 0, 0)));
		addButton.setText("Add");
		addButton.setPreferredSize(new Dimension(100, 10));
		addButton.setMargin(new java.awt.Insets(2, 2, 2, 2));
		addButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				addButtonActionPerformed(evt);
			}
		});

		deleteButton.setText("Delete");
		deleteButton.setPreferredSize(new Dimension(100, 10));
		deleteButton.setMargin(new java.awt.Insets(2, 2, 2, 2));
		deleteButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				deleteButtonActionPerformed(evt);
			}
		});

		// New in 2.6
		minMaxButton.setText("Min/Max");
		minMaxButton.setPreferredSize(new Dimension(100, 10));
		minMaxButton.setMargin(new java.awt.Insets(2, 2, 2, 2));
		minMaxButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				minMaxButtonActionPerformed(evt);
			}
		});

		cancelButton.setText("Cancel");
		cancelButton.setMargin(new java.awt.Insets(2, 2, 2, 2));
		cancelButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				firePropertyChange(EDITOR_WINDOW_CLOSED, this, null);
				setVisible(false);
			}
		});

		okButton.setText("OK");
		// okButton.setPreferredSize(new Dimension(50, 30));
		okButton.setMargin(new java.awt.Insets(2, 2, 2, 2));
		okButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				firePropertyChange(EDITOR_WINDOW_CLOSED, this, null);
				setVisible(false);
			}
		});

		slider.setMaximumValue(100.0F);
		rotaryEncoder.setMaximumValue(100.0F);

		org.jdesktop.layout.GroupLayout sliderLayout = new org.jdesktop.layout.GroupLayout(
				slider);
		slider.setLayout(sliderLayout);
		sliderLayout.setHorizontalGroup(sliderLayout.createParallelGroup(
				org.jdesktop.layout.GroupLayout.LEADING).add(0, 486,
				Short.MAX_VALUE));
		sliderLayout.setVerticalGroup(sliderLayout.createParallelGroup(
				org.jdesktop.layout.GroupLayout.LEADING).add(0, 116,
				Short.MAX_VALUE));

		org.jdesktop.layout.GroupLayout jXMultiThumbSlider1Layout = new org.jdesktop.layout.GroupLayout(
				rotaryEncoder);
		rotaryEncoder.setLayout(jXMultiThumbSlider1Layout);
		jXMultiThumbSlider1Layout.setHorizontalGroup(jXMultiThumbSlider1Layout
				.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
				.add(0, 84, Short.MAX_VALUE));
		jXMultiThumbSlider1Layout.setVerticalGroup(jXMultiThumbSlider1Layout
				.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
				.add(0, 65, Short.MAX_VALUE));

		org.jdesktop.layout.GroupLayout rangeSettingPanelLayout = new org.jdesktop.layout.GroupLayout(
				rangeSettingPanel);
		rangeSettingPanel.setLayout(rangeSettingPanelLayout);
		rangeSettingPanelLayout
				.setHorizontalGroup(rangeSettingPanelLayout
						.createParallelGroup(
								org.jdesktop.layout.GroupLayout.LEADING)
						.add(rangeSettingPanelLayout
								.createSequentialGroup()
								.addContainerGap()
								.add(valueLabel,
										org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
										org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
										org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
								.addPreferredGap(
										org.jdesktop.layout.LayoutStyle.RELATED)
								.add(valueSpinner,
										org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
										100,
										org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
								.addPreferredGap(
										org.jdesktop.layout.LayoutStyle.RELATED,
										118, Short.MAX_VALUE)
								.add(minMaxButton,
										org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
										100,
										org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
								.addPreferredGap(
										org.jdesktop.layout.LayoutStyle.RELATED)
								.add(addButton,
										org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
										100,
										org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
								.addPreferredGap(
										org.jdesktop.layout.LayoutStyle.RELATED)
								.add(deleteButton).add(10, 10, 10))
						.add(rangeSettingPanelLayout
								.createSequentialGroup()
								.addContainerGap()
								.add(propertyLabel,
										org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
										org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
										org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
								.addPreferredGap(
										org.jdesktop.layout.LayoutStyle.RELATED)
								.add(propertyComponent,
										org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
										100,
										org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)));

		rangeSettingPanelLayout
				.setVerticalGroup(rangeSettingPanelLayout
						.createSequentialGroup()
						.add(rangeSettingPanelLayout
								.createParallelGroup(
										org.jdesktop.layout.GroupLayout.BASELINE)
								.add(valueLabel)
								.add(valueSpinner,
										org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
										org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
										org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
								.add(minMaxButton).add(deleteButton)
								.add(addButton))
						.add(rangeSettingPanelLayout
								.createParallelGroup(
										org.jdesktop.layout.GroupLayout.BASELINE)
								.add(propertyLabel)
								.add(propertyComponent,
										org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
										org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
										org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)));

		org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(
				mainPanel);
		mainPanel.setLayout(layout);

		layout.setHorizontalGroup(layout
				.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
				.add(layout
						.createSequentialGroup()
						.addContainerGap()
						.addPreferredGap(
								org.jdesktop.layout.LayoutStyle.RELATED, 118,
								Short.MAX_VALUE)
						.add(cancelButton,
								org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
								100,
								org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
						.addPreferredGap(
								org.jdesktop.layout.LayoutStyle.RELATED)
						.add(okButton,
								org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
								100,
								org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
						.add(10, 10, 10))
				.add(rangeSettingPanel,
						org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
						org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
						Short.MAX_VALUE)
				.add(layout
						.createSequentialGroup()
						.add(iconPanel,
								org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
								org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
								org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
						.add(belowPanel,
								org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
								org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
								org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
						.add(slider,
								org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
								243, Short.MAX_VALUE)
						.add(abovePanel,
								org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
								org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
								org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)));

		layout.setVerticalGroup(layout
				.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
				.add(layout
						.createSequentialGroup()
						.add(layout
								.createParallelGroup(
										org.jdesktop.layout.GroupLayout.LEADING)
								.add(org.jdesktop.layout.GroupLayout.TRAILING,
										slider,
										org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
										145, Short.MAX_VALUE)
								.add(org.jdesktop.layout.GroupLayout.TRAILING,
										iconPanel,
										org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
										org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
										Short.MAX_VALUE)
								.add(org.jdesktop.layout.GroupLayout.TRAILING,
										belowPanel,
										org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
										org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
										Short.MAX_VALUE)
								.add(org.jdesktop.layout.GroupLayout.TRAILING,
										abovePanel,
										org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
										org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
										Short.MAX_VALUE))
						.addPreferredGap(
								org.jdesktop.layout.LayoutStyle.RELATED)
						.add(rangeSettingPanel,
								org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
								org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
								org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
						.add(layout
								.createParallelGroup(
										org.jdesktop.layout.GroupLayout.LEADING)
								.add(cancelButton,
										org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
										org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
										org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
								.add(okButton,
										org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
										org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
										org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))));

		// add the main panel to the dialog.
		this.getContentPane().add(mainPanel);
		this.pack();
	} // </editor-fold>

	protected void minMaxButtonActionPerformed(ActionEvent evt) {
		final Double[] newVal = MinMaxDialog.getMinMax(null, 0, 100,
				"min-max-attribute");

		if (newVal == null)
			return;

		updateMap();
		this.repaint();
	}

	abstract protected void deleteButtonActionPerformed(
			java.awt.event.ActionEvent evt);

	abstract protected void addButtonActionPerformed(
			java.awt.event.ActionEvent evt);

	private void initRangeValues() {

	}

	protected void setSidePanelIconColor(Color below, Color above) {
		this.abovePanel.setColor(above);
		this.belowPanel.setColor(below);
		repaint();
	}

	// Variables declaration - do not modify
	protected javax.swing.JButton addButton;
	protected javax.swing.JButton colorButton;
	protected javax.swing.JButton deleteButton;
	protected javax.swing.JButton okButton;
	protected javax.swing.JButton cancelButton;
	protected javax.swing.JPanel iconPanel;
	private javax.swing.JPanel rangeSettingPanel;
	protected JXMultiThumbSlider slider;
	protected JSpinner valueSpinner;
	private JLabel valueLabel;
	private JLabel propertyLabel;
	protected JSpinner propertySpinner = null;
	protected JComponent propertyComponent;
	protected JXMultiThumbSlider rotaryEncoder;
	protected JButton minMaxButton;

	/*
	 * For Gradient panel only.
	 */
	protected BelowAndAbovePanel abovePanel;
	protected BelowAndAbovePanel belowPanel;

	@SuppressWarnings("unchecked")
	protected int getSelectedPoint(int selectedIndex) {
		final List<Thumb<?>> thumbs = slider.getModel().getSortedThumbs();
		Thumb<?> selected = slider.getModel().getThumbAt(selectedIndex);
		for (int i = 0; i < thumbs.size(); i++) {
			if (thumbs.get(i) == selected) {
				return i;
			}
		}

		return -1;
	}

	protected void selectThumbAtPosition(float position) {
		int selectedIndex = getThumbIndexAtPosition(position);
		if (selectedIndex != -1) {
			TriangleThumbRenderer renderer = (TriangleThumbRenderer) slider
					.getThumbRenderer();
			// renderer.setSelectedIndex(selectedIndex);
			enableSpinner(selectedIndex);
		}
	}

	@SuppressWarnings("unchecked")
	protected int getThumbIndexAtPosition(float position) {
		final List<Thumb<?>> thumbs = slider.getModel().getSortedThumbs();
		for (int i = 0; i < thumbs.size(); i++) {
			if (slider.getModel().getThumbAt(i).getPosition() == position) {
				return i;
			}
		}
		return -1;
	}

	protected void setButtonColor(Color newColor) {
		final int iconWidth = 10;
		final int iconHeight = 10;
		final BufferedImage bi = new BufferedImage(iconWidth, iconHeight,
				BufferedImage.TYPE_INT_RGB);
		final Graphics2D g2 = bi.createGraphics();

		/*
		 * Fill background
		 */
		g2.setColor(newColor);
		g2.fillRect(0, 0, iconWidth, iconHeight);

		Icon colorIcon = new ImageIcon(bi);
		colorButton.setIcon(colorIcon);
		colorButton.setIconTextGap(6);

	}

	@SuppressWarnings("unchecked")
	protected void updateMap() {
		final List<Thumb> thumbs = slider.getModel().getSortedThumbs();

		Thumb t;
		Double newVal;

		if (thumbs.size() == 1) {

			return;
		}

		int size = thumbs.size();
		for (int i = 0; i < size; i++) {
			t = thumbs.get(i);

		}
	}

	protected void enableSpinner(int selectedIndex) {
		valueSpinner.setEnabled(true);

		final int count = slider.getModel().getThumbCount();
		// for(int i=0; i<count; i++) {
		// final Thumb<?> thumb = slider.getModel().getThumbAt(i);
		// System.out.println(i + ": " + thumb.getPosition() + " = " +
		// thumb.getObject());
		// }

		float range = 100;
		float min = 100;
		final Thumb<?> selectedThumb = slider.getModel().getThumbAt(
				selectedIndex);
		final float newVal = ((selectedThumb.getPosition() / 100) * range)
				+ min;

		valueSpinner.setValue(newVal);
		updateMap();

		colorButton.setEnabled(true);
		setButtonColor((Color) selectedThumb.getObject());

	}

	protected void disableSpinner() {
		valueSpinner.setEnabled(false);
		valueSpinner.setValue(0);
	}

	// End of variables declaration
	protected class ThumbMouseListener extends MouseAdapter {
		public void mouseReleased(MouseEvent e) {
			int selectedIndex = -1;
			// int selectedIndex =
			// ((TriangleThumbRenderer)slider.getThumbRenderer()).getSelectedIndex();

			if ((0 <= selectedIndex) && (slider.getModel().getThumbCount() > 0)) {
				enableSpinner(selectedIndex);
				slider.repaint();
				repaint();
			} else {
				disableSpinner();
			}
		}
	}

	/**
	 * Watching spinner
	 * 
	 * @author kono
	 * 
	 */
	class SpinnerChangeListener implements ChangeListener {
		SpinnerNumberModel spinnerModel;

		public SpinnerChangeListener(SpinnerNumberModel model) {
			this.spinnerModel = model;
		}

		public void stateChanged(ChangeEvent e) {

			float min = 100;
			float max = 200;
			float range = 100;
			final Number newVal = spinnerModel.getNumber();
			final int selectedIndex = -1;
			// final int selectedIndex =
			// ((TriangleThumbRenderer)slider.getThumbRenderer()).getSelectedIndex();

			if ((0 <= selectedIndex)
					&& (slider.getModel().getThumbCount() >= 1)) {

				if ((newVal.doubleValue() < min)
						|| (newVal.doubleValue() > max)) {

					if ((lastSpinnerNumber > min) && (lastSpinnerNumber < max)) {
						spinnerModel.setValue(lastSpinnerNumber);
					} else {
						spinnerModel.setValue(0);
					}

					return;
				}

				final float newPosition = ((newVal.floatValue() - min) / range);

				JComponent selectedThumb = null;
				// JComponent selectedThumb =
				// ((TriangleThumbRenderer)slider.getThumbRenderer()).getSelectedThumb();
				slider.getModel().getThumbAt(selectedIndex)
						.setPosition(newPosition * 100);

				selectedThumb.setLocation(
						(int) ((slider.getSize().width - 12) * newPosition), 0);

				updateMap();

				selectedThumb.repaint();
				slider.getParent().repaint();
				slider.repaint();
				lastSpinnerNumber = newVal.doubleValue();
			}
		}
	}

	class PropertySpinnerChangeListener implements ChangeListener {
		SpinnerNumberModel spinnerModel;

		public PropertySpinnerChangeListener(SpinnerNumberModel model) {
			this.spinnerModel = model;
		}

		public void stateChanged(ChangeEvent e) {
			final Float newVal = new Float(spinnerModel.getNumber()
					.doubleValue());
			// final int selectedIndex =
			// ((TriangleThumbRenderer)slider.getThumbRenderer()).getSelectedIndex();
			// ContinuousTrackRenderer trackRenderer =
			// (ContinuousTrackRenderer)slider.getTrackRenderer();
			// trackRenderer.setSelectedIndex(selectedIndex);
			//
			// trackRenderer.setSelectedValue(newVal);

			slider.repaint();
			repaint();
		}
	}
}
