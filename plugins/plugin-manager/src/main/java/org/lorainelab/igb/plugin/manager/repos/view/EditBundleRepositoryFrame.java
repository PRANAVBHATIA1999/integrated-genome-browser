/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.lorainelab.igb.plugin.manager.repos.view;

import com.affymetrix.igb.swing.JRPTextField;
import com.google.common.base.Strings;
import org.lorainelab.igb.plugin.manager.repos.PluginRepositoryList;
import org.lorainelab.igb.preferences.model.PluginRepository;
import java.awt.Point;
import java.io.File;
import java.net.HttpURLConnection;
import java.net.URI;
import java.net.URL;
import javax.net.ssl.HttpsURLConnection;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JTextArea;
import javax.swing.SwingUtilities;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 *
 * @author noorzahara
 * 
 * IGBF-1902 - Add Edit Button to edit the URL/ Name.
 * The file is created similar to AddBundleRepositoryFrame.java
 * 
 */
public class EditBundleRepositoryFrame extends JFrame {
    
    private static final long serialVersionUID = 1L;
    private static final String REPOSITORY_XML_FILE_PATH = "repository.xml";

    private static final Logger logger = LoggerFactory.getLogger(EditBundleRepositoryFrame.class);
    private JPanel parent;
    private PluginRepository currentRepo;
    private PluginRepositoryList pluginRepositoryList;

    public EditBundleRepositoryFrame(JPanel parent, PluginRepositoryList pluginRepositoryList) {
        this.parent = parent;
        this.pluginRepositoryList = pluginRepositoryList;
        initComponents();
        DocumentListener dl = new MyDocumentListener();
        nameText.getDocument().addDocumentListener(dl);
        urlText.getDocument().addDocumentListener(dl);

    }

    private void checkFieldsChange() {
        if (Strings.isNullOrEmpty(nameText.getText()) || Strings.isNullOrEmpty(urlText.getText())) {
            addServerButton.setEnabled(false);
            return;
        }
        addServerButton.setEnabled(true);

    }

    private class MyDocumentListener implements DocumentListener {

        @Override
        public void changedUpdate(DocumentEvent e) {
            checkFieldsChange();
        }

        @Override
        public void insertUpdate(DocumentEvent e) {
            checkFieldsChange();
        }

        @Override
        public void removeUpdate(DocumentEvent e) {
            checkFieldsChange();
        }
    }

    public void init(PluginRepository pluginRepository) {
        currentRepo = pluginRepository;
        setTitle("Edit Plugin Repository");
        nameText.setText(pluginRepository.getName());
        urlText.setText(pluginRepository.getUrl());
        addServerButton.setText("Save Changes");
        textArea.setText("");
        display();
    }

    private void display() {
        JFrame topFrame = (JFrame) SwingUtilities.getWindowAncestor(parent);
        Point location = topFrame.getLocation();
        setLocation(location.x + topFrame.getWidth() / 2 - getWidth() / 2,
                location.y + getHeight() / 2 - getHeight() / 2);
        setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        nameLabelField = new javax.swing.JLabel();
        nameText = new JRPTextField("ServerPrefsView_name", "Your server nameText");
        urlLabelField = new javax.swing.JLabel();
        urlText = new JRPTextField("ServerPrefsView_url", "http://");
        textArea = new JTextArea();
        cancelButton = new javax.swing.JButton();
        addServerButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        nameLabelField.setText("Name:");

        urlLabelField.setText("URL:");
       
        textArea.setEditable(false);
        textArea.setSize(70, 70);
        textArea.setBackground(this.getBackground());
        
        cancelButton.setText("Cancel");
        cancelButton.addActionListener((java.awt.event.ActionEvent evt) -> {
            cancelButtonActionPerformed(evt);
        });

        addServerButton.setText("Submit");
        addServerButton.addActionListener((java.awt.event.ActionEvent evt) -> {
            addServerButtonActionPerformed(evt);
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(12, 12, 12)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(nameLabelField)
                            .add(urlLabelField))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(urlText)
                            .add(nameText)))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, textArea)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                                .add(cancelButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 78, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(addServerButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 150, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))))
                .add(8, 8, 8))
        );

        layout.linkSize(new java.awt.Component[] {textArea}, org.jdesktop.layout.GroupLayout.HORIZONTAL);

        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .add(24, 24, 24)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(nameLabelField)
                    .add(nameText, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(28, 28, 28)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(urlLabelField)
                    .add(urlText, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(textArea)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 18, Short.MAX_VALUE)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(addServerButton)
                    .add(cancelButton))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>                        
        
        private void showTextMessage(String message) {  
            textArea.setVisible(true);
            textArea.setText(message);
	}

	private void addServerButtonActionPerformed(java.awt.event.ActionEvent evt) {   
            if (!isValidRepositoryUrl(urlText.getText())) {
                return;
            }
            currentRepo.setName(nameText.getText());
            currentRepo.setUrl(urlText.getText());
            pluginRepositoryList.updatePluginRepoPrefs(currentRepo);
            this.setVisible(false);
	}                                               

	private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {                                             
            this.setVisible(false);
	}                                            
    // Variables declaration - do not modify                     
    private javax.swing.JButton addServerButton;
    private static javax.swing.JButton cancelButton;
    private static javax.swing.JLabel nameLabelField;
    private static javax.swing.JTextField nameText;
    private static javax.swing.JTextArea textArea;
    private static javax.swing.JLabel urlLabelField;
    private static javax.swing.JTextField urlText;
    // End of variables declaration                   
    
    /**
     * The function checks if the given string is a valid url.
     * 
     * @param url
     * @return 
     */
    private boolean isValidRepositoryUrl(String url) {
        try {
                String repositoryXmlUrl =  (url.lastIndexOf("/") == (url.length()-1)) ? 
                        url + REPOSITORY_XML_FILE_PATH : url + "/" + REPOSITORY_XML_FILE_PATH;
                
            if (isLocalFile(new URI(repositoryXmlUrl))){
                File file = new File(new URL(repositoryXmlUrl).getFile());
                if (!file.exists()) {
                    throw new Exception("File not Found!");
                }
                return true;
            }
            
            int responseCode = 0;
            
            if ( repositoryXmlUrl.contains("https")) {
               HttpsURLConnection con = (HttpsURLConnection) new URL(repositoryXmlUrl).openConnection();
               responseCode = con.getResponseCode();
            } else {
               HttpURLConnection con = (HttpURLConnection) new URL(repositoryXmlUrl).openConnection();
               responseCode = con.getResponseCode();
            }
            
            if (responseCode != HttpsURLConnection.HTTP_OK) {
                 throw new Exception("Malformed URL.");
            }
            
            return true;
        } catch ( Exception e) {
            this.setVisible(true);
            logger.debug("Exception has occured", e);
            showTextMessage("Url is Invalid...Try Again!");
            return false;
        }
    }
    
    /**
     * The function checks if the given uri contains a local or a remote path.
     * @param uri
     * @return 
     */
    private static boolean isLocalFile(URI uri) {
        String scheme = uri.getScheme();
        return StringUtils.equalsIgnoreCase(scheme, "file");
    }
    
    
}
